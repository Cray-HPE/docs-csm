#!/bin/bash

# MIT License
#
# (C) Copyright 2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# This script is to restart the vault pods separately.
# Because vault was not upgraded in this release that is why we need this script.

set -x

NAMESPACE="vault" # Set your namespace here
TARGET_IMAGE="proxyv2:1.19.10"
TIMEOUT=300 # Timeout in seconds to wait for the pods to become ready
pods_to_delete=()

# Get all pods in the namespace
pods=$(kubectl get pods -n "$NAMESPACE" -o jsonpath='{.items[*].metadata.name}')

# Check each pod's images
for pod in $pods; do
  # Get the container images in the pod
  images=$(kubectl get pod "$pod" -n "$NAMESPACE" -o jsonpath='{.spec.containers[*].image}')

  # Check if the TARGET_IMAGE is present in the pod's images
  if [[ $images != *"$TARGET_IMAGE"* ]]; then
    echo "Pod $pod does not have the target image $TARGET_IMAGE and will be deleted."
    pods_to_delete+=("$pod")
  else
    echo "Pod $pod already has the target image $TARGET_IMAGE."
  fi
done

# Delete all pods that need to be restarted
if [ ${#pods_to_delete[@]} -gt 0 ]; then
  echo "Deleting the following pods: ${pods_to_delete[*]}"
  kubectl delete pod "${pods_to_delete[@]}" -n "$NAMESPACE" --grace-period=0 --force

  # Check if the pods have been recreated and are running
  for pod in "${pods_to_delete[@]}"; do
    echo "Waiting for pod $pod to be recreated..."
    start_time=$(date +%s)

    while true; do
      # Get the new pod name (generated by the controller)
      new_pod=$(kubectl get pods -n "$NAMESPACE" -o jsonpath="{.items[?(@.metadata.generateName==\"${pod%-*}-\")].metadata.name}" | head -n 1)

      if [ -n "$new_pod" ]; then
        # Check the status of the new pod
        pod_status=$(kubectl get pod "$new_pod" -n "$NAMESPACE" -o jsonpath='{.status.phase}')

        if [ "$pod_status" == "Running" ]; then
          echo "Pod $new_pod is now Running."
          continue
        else
          echo "Pod $new_pod is in $pod_status state. Waiting..."
        fi
      else
        echo "Pod $pod has not yet been recreated. Waiting..."
      fi

      current_time=$(date +%s)
      elapsed_time=$((current_time - start_time))

      if [ $elapsed_time -ge $TIMEOUT ]; then
        echo "Timeout reached: Pod $pod did not come up within $TIMEOUT seconds."
        break
      fi

      sleep 5
    done
  done
else
  echo "No pods need to be deleted."
fi
