#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: s3-upload
  namespace: argo
spec:
  entrypoint: main
  templates:
### Main Steps ###
  - name: main
    metrics:
        prometheus:
        - name: operation_counter
          help: "Count of step execution by result status"
          labels:
            - key: "opname"
              value: "s3-upload"
            - key: stage
              value: "deliver-product"
            - key: type
              value: "product"
            - key: pname
              value: "{{=jsonpath(inputs.parameters.global_params, '$.product_manifest.current_product.manifest.name')}}"
            - key: pversion
              value: "{{=jsonpath(inputs.parameters.global_params, '$.product_manifest.current_product.manifest.version')}}"
            - key: status
              value: "{{status}}"
          counter:
            value: "1"
    inputs:
      parameters:
        - name: global_params
    steps:
    - - name: start-operation
        templateRef:
          name: workflow-template-record-time-template
          template: record-time-template
    - - name: s3-upload
        templateRef:
          name: iuf-base-template
          template: shell-script
        arguments:
          parameters:
            - name: dryRun
              value: false
            - name: scriptContent
              value: |
                CONTENT=$(echo '{{inputs.parameters.global_params}}' | jq -r '.product_manifest.current_product.manifest')
                PARENT_DIR=$(echo '{{inputs.parameters.global_params}}' | jq -r '.stage_params."process-media".current_product.parent_directory')
                PRODUCT=$(echo '{{inputs.parameters.global_params}}' | jq -r '.product_manifest.current_product.manifest.name')
                VERSION=$(echo '{{inputs.parameters.global_params}}' | jq -r '.product_manifest.current_product.manifest.version')

                if [[ "${CONTENT,,}" == "null" ]] || [[ "$CONTENT" == "" ]]; then
                    echo "ERROR No products found. IUF requires at least one product. Please place at least one valid product tarball in {{inputs.parameters.global_params.media_dir}} and start again from the 'process-media' stage"
                    exit 1
                fi

                if [[ "${PRODUCT,,}" == "null" ]] || [[ "$PRODUCT" == "" ]]; then
                    echo "ERROR Product name not found in the product manifest. Rerun with valid product tarball from 'process-media' stage"
                    exit 1
                fi

                if [[ "${PARENT_DIR,,}" == "null" ]] || [[ "$PARENT_DIR" == "" ]]; then
                    echo "ERROR Cannot access product directory for $PRODUCT. Rerun with valid product tarball from 'process-media' stage"
                    exit 1
                fi

                echo "INFO S3 uploading manifest for $PRODUCT-$VERSION from $PARENT_DIR"
                /usr/local/bin/s3-upload "$CONTENT" "$PARENT_DIR"
                if [ $? -ne 0 ]; then
                  echo "ERROR S3 manifest upload failed for $PRODUCT from $PARENT_DIR"
                  exit 1
                fi
    - - name: s3-manufacture-product-catalog-data
        template: make-product-catalog-content
        arguments:
          parameters:
            - name: manifest_s3_content
              value: "{{=toJson(jsonpath(inputs.parameters.global_params, '$.product_manifest.current_product.manifest.content.s3'))}}"

    - - name: s3-update-product-catalog
        templateRef:
          name: update-product-catalog-template
          template: catalog-update
        arguments:
          parameters:
            - name: product-name
              value: "{{=jsonpath(inputs.parameters.global_params, '$.product_manifest.current_product.manifest.name')}}"
            - name: product-version
              value: "{{=jsonpath(inputs.parameters.global_params, '$.product_manifest.current_product.manifest.version')}}"
            - name: yaml-content
              value: "{{steps.s3-manufacture-product-catalog-data.outputs.parameters.product-content}}"

    - - name: end-operation
        templateRef:
          name: workflow-template-record-time-template
          template: record-time-template
    - - name:  prom-metrics
        template: prom-metrics
        arguments:
          parameters:
          - name: opstart
            value: "{{steps.start-operation.outputs.result}}"
          - name: opend
            value: "{{steps.end-operation.outputs.result}}"
          - name: pdname
            value: "{{=jsonpath(inputs.parameters.global_params, '$.product_manifest.current_product.manifest.name')}}"
          - name: pdversion
            value: "{{=jsonpath(inputs.parameters.global_params, '$.product_manifest.current_product.manifest.version')}}"
  - name: prom-metrics
    inputs:
      parameters:
      - name: opstart
      - name: opend
      - name: pdname
      - name: pdversion
    metrics:
      prometheus:
        - name: operation_time
          help: "Duration gauge by operation name in seconds"
          labels:
            - key: opname
              value: "s3-upload"
            - key: stage
              value: "deliver-product"
            - key: type
              value: "product"
            - key: pdname
              value: "{{inputs.parameters.pdname}}"
            - key: pdversion
              value: "{{inputs.parameters.pdversion}}"
            - key: opstart
              value: "{{inputs.parameters.opstart}}"
            - key: opend
              value: "{{inputs.parameters.opend}}"
          gauge:
            value: "{{outputs.parameters.diff-time-value}}"
    outputs:
      parameters:
        - name: diff-time-value
          globalName: diff-time-value
          valueFrom:
            path: /tmp/diff_time.txt
    container:
      image: artifactory.algol60.net/csm-docker/stable/docker.io/alpine/git:2.32.0
      command: [sh, -c]
      args: ["DIFF_TIME=$(expr {{inputs.parameters.opend}} - {{inputs.parameters.opstart}}); echo $DIFF_TIME; echo $DIFF_TIME > /tmp/diff_time.txt"]
  
  - name: make-product-catalog-content
    inputs:
      parameters:
      - name: manifest_s3_content
    outputs:
      parameters:
      - name: product-content
        valueFrom:
          path: /tmp/product-content
          default: "{\"component_versions\": {\"s3\": []}}"
    script:
      image: artifactory.algol60.net/csm-docker/stable/docker.io/portainer/kubectl-shell:latest-v1.21.1-amd64
      command: [bash]
      source: |
        PRODUCT=$(echo '{{inputs.parameters.global_params}}' | jq -r '.product_manifest.current_product.manifest.name')
        ARRAY=$(echo '{{inputs.parameters.manifest_s3_content}}' | jq -r '[.[] | {"bucket": .bucket, "key": .key}]')
        if [ $? -ne 0 ]; then
          ARRAY="[]"
          echo "INFO No S3 content found in the manifest for $PRODUCT. Nothing to do here"
        fi
        echo "{\"component_versions\": {\"s3\": ${ARRAY}}}" > /tmp/product-content
