#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: management-two-master-nodes-rollout
spec:
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  nodeSelector:
    kubernetes.io/hostname: ncn-m001
  entrypoint: main
  templates:
    - name: main
      metrics:
        prometheus:
        - name: operation_counter
          help: "Count of step execution by result status"
          labels:
            - key: "opname"
              value: "management-two-master-nodes-rollout"
            - key: stage
              value: "management-nodes-rollout"
            - key: type
              value: "global"
            - key: pname
              value: "global"
            - key: pversion
              value: "global"
            - key: status
              value: "{{status}}"
          counter:
            value: "1"
      inputs:
        parameters:
          - name: auth_token
          - name: global_params
      dag:
        tasks:
          - name: start-operation
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template
          - name: verify-images-and-configuration
            dependencies:
              - start-operation
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{$.DryRun}}"
                - name: scriptContent
                  value: |
                    rebuild_workers=false
                    rebuild_masters=false
                    limit_management_nodes=$(echo '{{inputs.parameters.global_params}}' | jq -r '.input_params.limit_management_nodes[]')
                    if [[ -n $(echo $limit_management_nodes | grep 'Management_Worker') ]]; then rebuild_workers=true; fi
                    if [[ -n $(echo $limit_management_nodes | grep 'Management_Master') ]]; then rebuild_masters=true; fi

                    prepare_images_ouput=$(echo '{{inputs.parameters.global_params}}' | jq -r '.stage_params["prepare-images"].global["prepare-management-images"]["sat-bootprep-run"].script_stdout')

                    if $rebuild_workers; then
                      # Check config exists
                      config=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Worker")) | .[].configuration' | tr -d '"')
                      if [[ -z $config ]]; then echo "ERROR  no CFS configuration was received for 'Management_Worker' from prepare images stage"; exit 1; fi
                      cray cfs configurations describe "$config" > /dev/null
                      if [[ $? -ne 0 ]]; then
                        exit 1 # could not find the desired cfs configuration
                      else
                        echo "NOTICE found CFS configuration:$config in CFS for 'Management_Worker' nodes"
                      fi

                      # Check image exists
                      image=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Worker")) | .[].final_image_id' | tr -d '"')
                      if [[ -z $image ]]; then echo "ERROR  no image was received for 'Management_Worker' from prepare images stage"; exit 1; fi
                      if [[ $(echo $image | wc -l) -gt 1 ]]; then 
                        echo "ERROR  more than 1 image was received for Management_Worker nodes. Must be exactly 1 image to rebuild"
                        echo "ERROR  Images received: $image"; exit 1
                      fi
                      cray ims images describe "$image" > /dev/null
                      if [[ $? -ne 0 ]]; then
                        exit 1 # could not find the image in IMS
                      else
                        echo "NOTICE found image:$image in IMS for Management_Worker rebuild"
                      fi
                    fi

                    if $rebuild_masters; then
                      # Check config exists
                      config=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].configuration' | tr -d '"')
                      if [[ -z $config ]]; then echo "ERROR  no CFS configuration was received for 'Management_Master' from prepare images stage"; exit 1; fi
                      cray cfs configurations describe "$config" > /dev/null
                      if [[ $? -ne 0 ]]; then
                        exit 1 # could not find the desired cfs configuration
                      else
                        echo "NOTICE found CFS configuration:$config in CFS for 'Management_Master' nodes"
                      fi

                      # Check image exists
                      image=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].final_image_id' | tr -d '"')
                      if [[ -z $image ]]; then echo "ERROR  no image was received for 'Management_Master' from prepare images stage"; exit 1; fi
                      if [[ $(echo $image | wc -l) -gt 1 ]]; then 
                        echo "ERROR  more than 1 image was received for Management_Master nodes. Must be exactly 1 image to rebuild"
                        echo "ERROR  Images received: $image"; exit 1
                      fi
                      cray ims images describe "$image" > /dev/null
                      if [[ $? -ne 0 ]]; then
                        exit 1 # could not find the image in IMS
                      else
                        echo "NOTICE found image:$image in IMS for Management_Master rebuild"
                      fi
                    fi
          - name: upgrade-m002
            dependencies:
              - verify-images-and-configuration
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{$.DryRun}}"
                - name: scriptContent
                  value: |
                    export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')

                    limit_management_nodes=$(echo '{{inputs.parameters.global_params}}' | jq -r '.input_params.limit_management_nodes[]')
                    if [[ -z $(echo $limit_management_nodes | grep 'Management_Master') ]]; then 
                      echo "NOTICE  Not upgrading ncn-m002 nodes because 'Management_Master' was not in --limit-management-rollout"
                      exit 0
                    fi
                    labeled_nodes=$(kubectl get nodes --selector='iuf-prevent-rollout=true' -o jsonpath='{range .items[*]}{@.metadata.name}{" "}')
                    if [[ -n $(echo $labeled_nodes | grep ncn-m002) ]]; then
                      echo "NOTICE  ncn-m002 is labeled with 'iuf-prevent-rollout=true' which means it will not be rebuilt"
                      exit 0
                    fi

                    echo "NOTICE  updating CFS config on ncn-m002"
                    TARGET_NCN=ncn-m002
                    TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                    prepare_images_ouput=$(echo '{{inputs.parameters.global_params}}' | jq -r '.stage_params["prepare-images"].global["prepare-management-images"]["sat-bootprep-run"].script_stdout')
                    config=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].configuration' | tr -d '"')
                    cray cfs components update ${TARGET_XNAME} --enabled false --desired-config "${config}"

                    echo "NOTICE  updating boot-image in BSS on ncn-m002"
                    IMAGE_ID=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].final_image_id' | tr -d '"')
                    image_manifest_str=$(cray ims images describe $IMAGE_ID --format json | jq '.link.path')
                    image_manifest_str=${image_manifest_str#*s3://}
                    bucket="$( cut -d '/' -f 1 <<< "$image_manifest_str" )"
                    bucket_rm="${bucket}/"
                    path=${image_manifest_str#*${bucket_rm}}
                    path=${path%?}
                    temp_file="/tmp/$(echo $RANDOM | md5sum | head -c 21; echo).json"
                    cray artifacts get $bucket $path $temp_file
                    metal_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.rootfs.squashfs") | .path ' < $temp_file)
                    echo "INFO  Setting metal.server image to: $metal_image"
                    kernel_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.kernel") | .path ' < $temp_file)
                    kernel_image=$(echo "$kernel_image" | tr -d '"')
                    echo "INFO Setting kernel image to: $kernel_image"
                    initrd_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.initrd") | .path ' < $temp_file)
                    initrd_image=$(echo "$initrd_image" | tr -d '"')
                    echo "INFO  Setting initrd image to: $initrd_image"
                    METAL_SERVER=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' \
                    | awk -F 'metal.server=' '{print $2}' \
                    | awk -F ' ' '{print $1}')
                    NEW_METAL_SERVER=$metal_image
                    PARAMS=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' | \
                        sed "/metal.server/ s|${METAL_SERVER}|${NEW_METAL_SERVER}|" | \
                        tr -d \")
                    cray bss bootparameters update --hosts "${TARGET_XNAME}" \
                      --kernel $kernel_image \
                      --initrd $initrd_image \
                      --params "${PARAMS}"

                    export TERM=linux
                    echo "NOTICE  upgrading ncn-m002"
                    /usr/share/doc/csm/upgrade/scripts/upgrade/ncn-upgrade-master-nodes.sh ncn-m002
          - name: upgrade-m003
            dependencies:
              - upgrade-m002
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{$.DryRun}}"
                - name: scriptContent
                  value: |
                    export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                    
                    limit_management_nodes=$(echo '{{inputs.parameters.global_params}}' | jq -r '.input_params.limit_management_nodes[]')
                    if [[ -z $(echo $limit_management_nodes | grep 'Management_Master') ]]; then 
                      echo "NOTICE  Not upgrading ncn-m003 nodes because 'Management_Master' was not in --limit-management-rollout"
                      exit 0
                    fi
                    labeled_nodes=$(kubectl get nodes --selector='iuf-prevent-rollout=true' -o jsonpath='{range .items[*]}{@.metadata.name}{" "}')
                    if [[ -n $(echo $labeled_nodes | grep ncn-m003) ]]; then
                      echo "NOTICE  ncn-m003 is labeled with 'iuf-prevent-rollout=true' which means it will not be rebuilt"
                      exit 0
                    fi
                    
                    echo "NOTICE  updating CFS config on ncn-m003"
                    TARGET_NCN=ncn-m003
                    TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                    prepare_images_ouput=$(echo '{{inputs.parameters.global_params}}' | jq -r '.stage_params["prepare-images"].global["prepare-management-images"]["sat-bootprep-run"].script_stdout')
                    config=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].configuration' | tr -d '"')
                    cray cfs components update ${TARGET_XNAME} --enabled false --desired-config "${config}"

                    echo "NOTICE  updating boot-image in BSS on ncn-m003"
                    IMAGE_ID=$(echo $prepare_images_ouput | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].final_image_id' | tr -d '"')
                    image_manifest_str=$(cray ims images describe $IMAGE_ID --format json | jq '.link.path')
                    image_manifest_str=${image_manifest_str#*s3://}
                    bucket="$( cut -d '/' -f 1 <<< "$image_manifest_str" )"
                    bucket_rm="${bucket}/"
                    path=${image_manifest_str#*${bucket_rm}}
                    path=${path%?}
                    temp_file="/tmp/$(echo $RANDOM | md5sum | head -c 21; echo).json"
                    cray artifacts get $bucket $path $temp_file
                    metal_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.rootfs.squashfs") | .path ' < $temp_file)
                    echo "INFO  Setting metal.server image to: $metal_image"
                    kernel_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.kernel") | .path ' < $temp_file)
                    kernel_image=$(echo "$kernel_image" | tr -d '"')
                    echo "INFO Setting kernel image to: $kernel_image"
                    initrd_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.initrd") | .path ' < $temp_file)
                    initrd_image=$(echo "$initrd_image" | tr -d '"')
                    echo "INFO  Setting initrd image to: $initrd_image"
                    METAL_SERVER=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' \
                    | awk -F 'metal.server=' '{print $2}' \
                    | awk -F ' ' '{print $1}')
                    NEW_METAL_SERVER=$metal_image
                    PARAMS=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' | \
                        sed "/metal.server/ s|${METAL_SERVER}|${NEW_METAL_SERVER}|" | \
                        tr -d \")
                    cray bss bootparameters update --hosts "${TARGET_XNAME}" \
                      --kernel $kernel_image \
                      --initrd $initrd_image \
                      --params "${PARAMS}"

                    export TERM=linux
                    echo "NOTICE  upgrading ncn-m003"
                    /usr/share/doc/csm/upgrade/scripts/upgrade/ncn-upgrade-master-nodes.sh ncn-m003
          - name: end-operation
            dependencies:
              - upgrade-m003
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template
          - name: prom-metrics
            dependencies:
              - start-operation
              - end-operation
            template: prom-metrics
            arguments:
              parameters:
              - name: opstart
                value: "{{tasks.start-operation.outputs.result}}"
              - name: opend
                value: "{{tasks.end-operation.outputs.result}}"
    - name: prom-metrics
      inputs:
        parameters:
        - name: opstart
        - name: opend
      metrics:
        prometheus:
          - name: operation_time
            help: "Duration gauge by operation name in seconds"
            labels:
              - key: "opname"
                value: "management-two-master-nodes-rollout"
              - key: stage
                value: "management-nodes-rollout"
              - key: type
                value: "global"
              - key: pdname
                value: "global"
              - key: pdversion
                value: "global"
              - key: "opstart"
                value: "{{inputs.parameters.opstart}}"
              - key: "opend"
                value: "{{inputs.parameters.opend}}"
            gauge:
              value: "{{outputs.parameters.diff-time-value}}"
      outputs:
        parameters:
          - name: diff-time-value
            globalName: diff-time-value
            valueFrom:
              path: /tmp/diff_time.txt
      container:
        image: artifactory.algol60.net/csm-docker/stable/docker.io/alpine/git:2.32.0
        command: [sh, -c]
        args: ["DIFF_TIME=$(expr {{inputs.parameters.opend}} - {{inputs.parameters.opstart}}); echo $DIFF_TIME; echo $DIFF_TIME > /tmp/diff_time.txt"]
