#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: management-two-master-nodes-rollout
spec:
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  entrypoint: main
  templates:
    - name: main
      metrics:
        prometheus:
        - name: operation_counter
          help: "Count of step execution by result status"
          labels:
            - key: "opname"
              value: "management-two-master-nodes-rollout"
            - key: stage
              value: "management-nodes-rollout"
            - key: type
              value: "global"
            - key: pname
              value: "global"
            - key: pversion
              value: "global"
            - key: status
              value: "{{status}}"
          counter:
            value: "1"
      inputs:
        parameters:
          - name: auth_token
          - name: global_params
      dag:
        tasks:
          - name: start-operation
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template
          - name: INFO-to-read
            dependencies:
              - start-operation
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{$.DryRun}}"
                - name: mediaHost
                  value: "{{=jsonpath(inputs.parameters.global_params, '$.input_params.media_host')}}"                   
                - name: scriptContent
                  value: |
                    echo "NOTICE This workflow will rollout master nodes according to --limit-management-rollout parameter."
                    echo "NOTICE It will not rollout ncn-m001, this will need to be done manually as stated in the documentation."
                    echo "NOTICE Check the argo pod logs from each step in the workflow to see what the step is doing"
          - name: verify-master-images-and-configuration
            dependencies:
              - INFO-to-read
            templateRef:
              name: verify-ncn-images-and-configs
              template: main
            arguments:
              parameters:
                - name: dryRun
                  value: "{{$.DryRun}}"
                - name: global_params
                  value: "{{inputs.parameters.global_params}}"
                - name: nodeType
                  value: "Master"
          - name: upgrade-m002
            dependencies:
              - verify-master-images-and-configuration
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{$.DryRun}}"
                - name: mediaHost
                  valueFrom:
                    expression: "{{=jsonpath(inputs.parameters.global_params, '$.input_params.media_host')}} == 'ncn-m002' ? 'ncn-m001' : {{=jsonpath(inputs.parameters.global_params, '$.input_params.media_host')}}"
                - name: scriptContent
                  value: |
                    TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                    if [[ $? -ne 0 ]]; then
                      echo "ERROR Could not retrieve the access token from keycloak"
                    else
                      export TOKEN=$TOKEN
                    fi

                    TARGET_NCN=ncn-m002
                    echo '{{inputs.parameters.global_params}}' > global.params.data
                    limit_management_nodes=$(cat global.params.data | jq -r '.input_params.limit_management_nodes[]')
                    if [[ -z $(echo $limit_management_nodes | grep 'Management_Master') ]]; then
                      if [[ -z $(echo $limit_management_nodes | grep "$TARGET_NCN" ) ]]; then
                         echo "NOTICE ${TARGET_NCN} was not included in --limit-management-rollout. Not rebuilding ${TARGET_NCN}."
                         exit 0
                      fi
                    fi
                    labeled_nodes=$(kubectl get nodes --selector='iuf-prevent-rollout=true' -o jsonpath='{range .items[*]}{@.metadata.name}{" "}')
                    if [[ -n $(echo $labeled_nodes | grep $TARGET_NCN) ]]; then
                      echo "NOTICE $TARGET_NCN will not be rebuilt as it is labeled with 'iuf-prevent-rollout=true'"
                      exit 0
                    fi

                    TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                    prepare_images_output=$(cat global.params.data | jq -r '.stage_params["prepare-images"].global["prepare-management-images"]["sat-bootprep-run"].script_stdout')
                    config=$(echo $prepare_images_output | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].configuration' | tr -d '"')

                    echo "DEBUG Updating CFS config $config on $TARGET_NCN ($TARGET_XNAME)"
                    result=$(cray cfs components update ${TARGET_XNAME} --enabled false --desired-config "${config}" 2>&1)
                    if [[ $? -ne 0 ]]; then
                      result=$(echo "$result" | sed -e 's/^/DEBUG /')
                      echo "ERROR Could not update CFS config $config on $TARGET_NCN"
                      echo -e "DEBUG <cray cfs components update ${TARGET_XNAME} --enabled false --desired-config ${config}> failed with -\n\n$result"
                    fi

                    IMAGE_ID=$(echo $prepare_images_output | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].final_image_id' | tr -d '"')
                    echo "DEBUG Updating boot-image $IMAGE_ID in BSS on $TARGET_NCN ($TARGET_XNAME)"
                    image_manifest_str=$(cray ims images describe $IMAGE_ID --format json | jq '.link.path')
                    image_manifest_str=${image_manifest_str#*s3://}
                    bucket="$( cut -d '/' -f 1 <<< "$image_manifest_str" )"
                    bucket_rm="${bucket}/"
                    path=${image_manifest_str#*${bucket_rm}}
                    path=${path%?}
                    temp_file="/tmp/$(echo $RANDOM | md5sum | head -c 21; echo).json"
                    result=$(cray artifacts get $bucket $path $temp_file 2>&1)
                    if [ ! -s "$temp_file" ]; then
                      result=$(echo "$result" | sed -e 's/^/DEBUG /')
                      echo "ERROR Failed to get artifacts from bucket - $bucket, path - $path"
                      echo -e "DEBUG File $temp_file is empty after command <cray artifacts get $bucket $path $temp_file>. Output from command is -\n\n$result"
                    fi
                    metal_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.rootfs.squashfs") | .path ' < $temp_file)
                    if [ -z "$metal_image" ]; then
                      echo "ERROR Metal image (rootfs.squashfs image) is not present in the output of <cray artifacts get $bucket $path>"
                    else
                      echo "DEBUG Setting metal.server image to: $metal_image"
                    fi
                    kernel_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.kernel") | .path ' < $temp_file)
                    kernel_image=$(echo "$kernel_image" | tr -d '"')
                    if [ -z "$kernel_image" ]; then
                      echo "ERROR Kernel image is not present in the output of <cray artifacts get $bucket $path>"
                    else
                      echo "DEBUG Setting kernel image to: $kernel_image"
                    fi
                    initrd_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.initrd") | .path ' < $temp_file)
                    initrd_image=$(echo "$initrd_image" | tr -d '"')
                    if [ -z "$initrd_image" ]; then
                      echo "ERROR initrd image is not present in the output of <cray artifacts get $bucket $path>"
                    else
                      echo "DEBUG Setting initrd image to: $initrd_image"
                    fi
                    METAL_SERVER=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' \
                    | awk -F 'metal.server=' '{print $2}' \
                    | awk -F ' ' '{print $1}')
                    NEW_METAL_SERVER=$metal_image
                    PARAMS=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' | \
                        sed "/metal.server/ s|${METAL_SERVER}|${NEW_METAL_SERVER}|" | \
                        tr -d \")
                    result=$(cray bss bootparameters update --hosts "${TARGET_XNAME}" \
                      --kernel $kernel_image \
                      --initrd $initrd_image \
                      --params "${PARAMS}" 2>&1)
                    if [ $? != 0 ]; then
                      result=$(echo "$result" | sed -e 's/^/DEBUG /')
                      echo "ERROR Failed to update BSS boot parameters on $TARGET_NCN ($TARGET_XNAME)"
                      echo -e "DEBUG <cray bss bootparameters update --hosts ${TARGET_XNAME} --kernel $kernel_image --initrd $initrd_image --params ${PARAMS}> with error -\n\n$result"
                    else
                      echo "INFO Successfully updated BSS boot parameters on $TARGET_NCN ($TARGET_XNAME) with --kernel $kernel_image --initrd $initrd_image --params ${PARAMS}"
                    fi
                    if [[ -f /etc/cray/upgrade/csm/myenv ]]; then
                      source /etc/cray/upgrade/csm/myenv
                    fi
                    export TERM=linux
                    echo "DEBUG Upgrading $TARGET_NCN"
                    /usr/share/doc/csm/upgrade/scripts/upgrade/ncn-upgrade-master-nodes.sh $TARGET_NCN
          - name: upgrade-m003
            dependencies:
              - upgrade-m002
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{$.DryRun}}"
                - name: mediaHost
                  valueFrom:
                    expression: "{{=jsonpath(inputs.parameters.global_params, '$.input_params.media_host')}} == 'ncn-m003' ? 'ncn-m001' : {{=jsonpath(inputs.parameters.global_params, '$.input_params.media_host')}}"
                - name: scriptContent
                  value: |
                    TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                    if [[ $? -ne 0 ]]; then
                      echo "ERROR Could not retrieve the access token from keycloak"
                    else
                      export TOKEN=$TOKEN
                    fi

                    TARGET_NCN=ncn-m003
                    echo '{{inputs.parameters.global_params}}' > global.params.data
                    limit_management_nodes=$(cat global.params.data | jq -r '.input_params.limit_management_nodes[]')
                    if [[ -z $(echo $limit_management_nodes | grep 'Management_Master') ]]; then
                      if [[ -z $(echo $limit_management_nodes | grep "$TARGET_NCN" ) ]]; then
                         echo "NOTICE ${TARGET_NCN} was not included in --limit-management-rollout. Not rebuilding ${TARGET_NCN}."
                         exit 0
                      fi
                    fi
                    labeled_nodes=$(kubectl get nodes --selector='iuf-prevent-rollout=true' -o jsonpath='{range .items[*]}{@.metadata.name}{" "}')
                    if [[ -n $(echo $labeled_nodes | grep $TARGET_NCN) ]]; then
                      echo "NOTICE $TARGET_NCN will not be rebuilt as it is labeled with 'iuf-prevent-rollout=true'"
                      exit 0
                    fi

                    TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                    prepare_images_output=$(cat global.params.data | jq -r '.stage_params["prepare-images"].global["prepare-management-images"]["sat-bootprep-run"].script_stdout')
                    config=$(echo $prepare_images_output | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].configuration' | tr -d '"')

                    echo "DEBUG Updating CFS config $config on $TARGET_NCN ($TARGET_XNAME)"
                    result=$(cray cfs components update ${TARGET_XNAME} --enabled false --desired-config "${config}" 2>&1)
                    if [[ $? -ne 0 ]]; then
                      result=$(echo "$result" | sed -e 's/^/DEBUG /')
                      echo "ERROR Could not update CFS config $config on $TARGET_NCN"
                      echo -e "DEBUG <cray cfs components update ${TARGET_XNAME} --enabled false --desired-config ${config}> failed with -\n\n$result"
                    fi

                    IMAGE_ID=$(echo $prepare_images_output | jq '.images | map(select(.configuration_group_names[] == "Management_Master")) | .[].final_image_id' | tr -d '"')
                    echo "DEBUG Updating boot-image $IMAGE_ID in BSS on $TARGET_NCN ($TARGET_XNAME)"
                    image_manifest_str=$(cray ims images describe $IMAGE_ID --format json | jq '.link.path')
                    image_manifest_str=${image_manifest_str#*s3://}
                    bucket="$( cut -d '/' -f 1 <<< "$image_manifest_str" )"
                    bucket_rm="${bucket}/"
                    path=${image_manifest_str#*${bucket_rm}}
                    path=${path%?}
                    temp_file="/tmp/$(echo $RANDOM | md5sum | head -c 21; echo).json"
                    result=$(cray artifacts get $bucket $path $temp_file 2>&1)
                    if [ ! -s "$temp_file" ]; then
                      result=$(echo "$result" | sed -e 's/^/DEBUG /')
                      echo "ERROR Failed to get artifacts from bucket - $bucket, path - $path"
                      echo -e "DEBUG File $temp_file is empty after command <cray artifacts get $bucket $path $temp_file>. Output from command is -\n\n$result"
                    fi
                    metal_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.rootfs.squashfs") | .path ' < $temp_file)
                    if [ -z "$metal_image" ]; then
                      echo "ERROR Metal image (rootfs.squashfs image) is not present in the output of <cray artifacts get $bucket $path>"
                    else
                      echo "DEBUG Setting metal.server image to: $metal_image"
                    fi
                    kernel_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.kernel") | .path ' < $temp_file)
                    kernel_image=$(echo "$kernel_image" | tr -d '"')
                    if [ -z "$kernel_image" ]; then
                      echo "ERROR Kernel image is not present in the output of <cray artifacts get $bucket $path>"
                    else
                      echo "DEBUG Setting kernel image to: $kernel_image"
                    fi
                    initrd_image=$(jq '.artifacts | map({"path": .link.path, "type": .type}) | .[] | select( .type == "application/vnd.cray.image.initrd") | .path ' < $temp_file)
                    initrd_image=$(echo "$initrd_image" | tr -d '"')
                    if [ -z "$initrd_image" ]; then
                      echo "ERROR initrd image is not present in the output of <cray artifacts get $bucket $path>"
                    else
                      echo "DEBUG Setting initrd image to: $initrd_image"
                    fi
                    METAL_SERVER=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' \
                    | awk -F 'metal.server=' '{print $2}' \
                    | awk -F ' ' '{print $1}')
                    NEW_METAL_SERVER=$metal_image
                    PARAMS=$(cray bss bootparameters list --hosts "${TARGET_XNAME}" --format json | jq '.[] |."params"' | \
                        sed "/metal.server/ s|${METAL_SERVER}|${NEW_METAL_SERVER}|" | \
                        tr -d \")
                    result=$(cray bss bootparameters update --hosts "${TARGET_XNAME}" \
                      --kernel $kernel_image \
                      --initrd $initrd_image \
                      --params "${PARAMS}" 2>&1)
                    if [ $? != 0 ]; then
                      result=$(echo "$result" | sed -e 's/^/DEBUG /')
                      echo "ERROR Failed to update BSS boot parameters on $TARGET_NCN ($TARGET_XNAME)"
                      echo -e "DEBUG <cray bss bootparameters update --hosts ${TARGET_XNAME} --kernel $kernel_image --initrd $initrd_image --params ${PARAMS}> with error -\n\n$result"
                    else
                      echo "INFO Successfully updated BSS boot parameters on $TARGET_NCN ($TARGET_XNAME) with --kernel $kernel_image --initrd $initrd_image --params ${PARAMS}"
                    fi
                    if [[ -f /etc/cray/upgrade/csm/myenv ]]; then
                      source /etc/cray/upgrade/csm/myenv
                    fi
                    export TERM=linux
                    echo "DEBUG Upgrading $TARGET_NCN"
                    /usr/share/doc/csm/upgrade/scripts/upgrade/ncn-upgrade-master-nodes.sh $TARGET_NCN
          - name: end-operation
            dependencies:
              - upgrade-m003
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template
          - name: prom-metrics
            dependencies:
              - start-operation
              - end-operation
            template: prom-metrics
            arguments:
              parameters:
              - name: opstart
                value: "{{tasks.start-operation.outputs.result}}"
              - name: opend
                value: "{{tasks.end-operation.outputs.result}}"
    - name: prom-metrics
      inputs:
        parameters:
        - name: opstart
        - name: opend
      metrics:
        prometheus:
          - name: operation_time
            help: "Duration gauge by operation name in seconds"
            labels:
              - key: "opname"
                value: "management-two-master-nodes-rollout"
              - key: stage
                value: "management-nodes-rollout"
              - key: type
                value: "global"
              - key: pdname
                value: "global"
              - key: pdversion
                value: "global"
              - key: "opstart"
                value: "{{inputs.parameters.opstart}}"
              - key: "opend"
                value: "{{inputs.parameters.opend}}"
            gauge:
              value: "{{outputs.parameters.diff-time-value}}"
      outputs:
        parameters:
          - name: diff-time-value
            globalName: diff-time-value
            valueFrom:
              path: /tmp/diff_time.txt
      container:
        image: artifactory.algol60.net/csm-docker/stable/docker.io/alpine/git:2.32.0
        command: [sh, -c]
        args: ["DIFF_TIME=$(expr {{inputs.parameters.opend}} - {{inputs.parameters.opstart}}); echo $DIFF_TIME; echo $DIFF_TIME > /tmp/diff_time.txt"]
