#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: management-worker-nodes-rollout
spec:
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  nodeSelector:
    kubernetes.io/hostname: ncn-m001
  entrypoint: main
  templates:
    - name: main
      metrics:
        prometheus:
        - name: operation_counter
          help: "Count of step execution by result status"
          labels:
            - key: "opname"
              value: "management-worker-nodes-rollout"
            - key: stage
              value: "management-nodes-rollout"
            - key: type
              value: "global"
            - key: pname
              value: "global"
            - key: pversion
              value: "global"
            - key: status
              value: "{{status}}"
          counter:
            value: "1"
      inputs:
        parameters:
          - name: auth_token
          - name: global_params
          - name: dry_run
      dag:
        tasks:
          - name: start-operation
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template
          - name: get-worker-rebuild-sets
            dependencies:
              - start-operation
            templateRef:
              name: kubectl-and-jq-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: false
                - name: scriptContent
                  value: |
                    limit_management_nodes=$(echo '{{inputs.parameters.global_params}}' | jq -r '.input_params.limit_management_nodes[]')
                    if [[ -n $(echo $limit_management_nodes | grep 'Management_Worker') ]]; then
                      worker_nodes=$(kubectl get node --selector='!node-role.kubernetes.io/master' --no-headers=true | awk '{print $1}' | tr "\n", " ")
                      labeled_workers=$(kubectl get nodes --selector='iuf-prevent-rollout=true' -o jsonpath='{range .items[*]}{@.metadata.name}{" "}')
                      for labeled_worker in $labeled_workers; do
                        worker_nodes=$(echo $worker_nodes | sed s/"$labeled_worker"//)
                      done

                      # split nodes into sets to rebuild
                      percent_rollout=$(echo '{{inputs.parameters.global_params}}' | jq -r '.input_params.concurrent_management_rollout_percentage')
                      number_of_sets=$((100 / $percent_rollout))
                      if [[ $percent_rollout -lt 100 ]] && [[ $number_of_sets -lt 2 ]]; then
                        number_of_sets=2   # if 100% is not specified, we do not want only 1 set
                      fi
                      array_nodes_to_rebuild=($worker_nodes)
                      num_nodes_to_rebuild=${#array_nodes_to_rebuild[@]}
                      rebuild_set_size=$(( $num_nodes_to_rebuild / $number_of_sets ))
                      if [[ $rebuild_set_size -eq 0 ]]; then rebuild_set_size=1; fi
                      index=0
                      set=""
                      output=""
                      for node in $worker_nodes; do
                        index=$(( $index + 1 ))
                        set="${set},""$node"
                        if [[ $index -eq $rebuild_set_size ]]; then
                          output="${output} ${set#?}"
                          index=0
                          set=""
                        fi
                      done
                      if [[ -n $set ]]; then
                        output="${output} ${set#?}"
                      fi
                      echo "${output#?}"
                    else
                      echo 'none'
                    fi
          - name: process-worker-rebuild-sets
            dependencies:
              - get-worker-rebuild-sets
            templateRef: 
              name: process-sets
              template: main
            arguments:
              parameters:
                - name: sets
                  value: "{{tasks.get-worker-rebuild-sets.outputs.result}}"
          - name: rebuild-worker-nodes
            dependencies:
              - process-worker-rebuild-sets
            templateRef: 
              name: rebuild-set-of-workers
              template: main
            arguments:
              parameters:
                - name: sets
                  value: "{{tasks.process-worker-rebuild-sets.outputs.parameters.sets}}"
                - name: counter
                  value: "0"
                - name: limit
                  value: "{{tasks.process-worker-rebuild-sets.outputs.parameters.num_sets}}"
                - name: global_params
                  value: "{{inputs.parameters.global_params}}"
                - name: dry_run
                  value: "{{inputs.parameters.dry_run}}"
          - name: end-operation
            dependencies:
              - rebuild-worker-nodes
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template
          - name: prom-metrics
            dependencies:
              - start-operation
              - end-operation
            template: prom-metrics
            arguments:
              parameters:
              - name: opstart
                value: "{{tasks.start-operation.outputs.result}}"
              - name: opend
                value: "{{tasks.end-operation.outputs.result}}"
    - name: prom-metrics
      inputs:
        parameters:
        - name: opstart
        - name: opend
      metrics:
        prometheus:
          - name: operation_time
            help: "Duration gauge by operation name in seconds"
            labels:
              - key: "opname"
                value: "management-worker-nodes-rollout"
              - key: stage
                value: "management-nodes-rollout"
              - key: type
                value: "global"
              - key: pdname
                value: "global"
              - key: pdversion
                value: "global"
              - key: "opstart"
                value: "{{inputs.parameters.opstart}}"
              - key: "opend"
                value: "{{inputs.parameters.opend}}"
            gauge:
              value: "{{outputs.parameters.diff-time-value}}"
      outputs:
        parameters:
          - name: diff-time-value
            globalName: diff-time-value
            valueFrom:
              path: /tmp/diff_time.txt
      container:
        image: artifactory.algol60.net/csm-docker/stable/docker.io/alpine/git:2.32.0
        command: [sh, -c]
        args: ["DIFF_TIME=$(expr {{inputs.parameters.opend}} - {{inputs.parameters.opstart}}); echo $DIFF_TIME; echo $DIFF_TIME > /tmp/diff_time.txt"]
