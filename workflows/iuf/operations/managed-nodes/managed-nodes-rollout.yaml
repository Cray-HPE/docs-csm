apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: managed-nodes-rollout
spec:
  entrypoint: main
  templates:
    ### Main Steps ###
    - name: main
      inputs:
        parameters:
          - name: auth_token
          - name: global_params
      steps:
        - - name: sat-bootsys-reboot
            templateRef:
              name: sat-general-template
              template: sat-wrapper
            arguments:
              parameters:
                - name: auth_token
                  value: "{{inputs.parameters.auth_token}}"
                - name: script_content
                  value: |
                      prepare_images_output="{{=jsonpath(inputs.parameters.global_params, '$.stage_params.prepare_images')}}"
                      managed_rollout_strategy="{{=jsonpath(inputs.parameters.global_params, '$.input_params.managed_rollout_strategy')}}"
                      limit_managed_rollout="{{=jsonpath(inputs.parameters.global_params, '$.input_params.limit_managed_rollout')}}"

                      function main {
                          if [ -z "$managed_rollout_strategy" ] ; then
                              echo "ERROR: No managed_rollout_strategy provided."
                              exit 1
                          elif [ -z "$prepare_images_output" ] ; then
                              echo "ERROR: No prepare_images_output provided."
                              exit 1
                          fi

                          parse_session_templates
                          sat_bootsys_subcommand
                      }

                      function parse_session_templates {
                          tmpfile=$(mktemp /tmp/script.XXXXXX)

                          echo "${prepare_images_output}" | jq ".session_templates" >> "$tmpfile"
                          count=$(jq '. | length' "$tmpfile")

                          if (( $count == 0 )); then
                              echo "ERROR: No session templates provided to parse, prepare-images output is empty."
                              exit 1
                          fi

                          session_templates_string=""
                          delim=""
                          for ((i=0; i<$count; i++)); do
                              template_name=$(jq -r '.['$i'].name' "$tmpfile")
                              session_templates_string="$session_templates_string$delim$template_name"
                              delim=","
                          done

                          rm "${tmpfile}"
                          if [ "$session_templates_string" == "" ]; then
                              echo "ERROR: Failed to parse session_templates from prepare_images_output"
                              exit 1
                          fi

                          echo "$session_templates_string"
                      }

                      function sat_bootsys_subcommand {
                          # TODO: Should I do BOOT or REBOOT?
                          if [ "$managed_rollout_strategy" == "reboot" ]; then
                              sat bootsys reboot --stage bos-operations --bos-templates "$session_templates_string"
                          elif [ "$managed_rollout_strategy" == "stage" ]; then
                              sat bootsys boot --stage bos-operations --staged --bos-templates "$session_templates_string"
                          fi
                      }

                      main