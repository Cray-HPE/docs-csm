#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: loftsman-manifest-deploy
spec:
  entrypoint: main
  templates:
    - name: main
      inputs:
        parameters:
          - name: auth_token
          - name: global_params
      steps:
      - - name: manifest-deploy
          templateRef: 
            name: iuf-base-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: false
              - name: scriptContent
                value: |
                  #!/usr/bin/bash
                  PRODUCT_NAME=$(echo '{{inputs.parameters.global_params}}' | jq -r '.product_manifest.current_product.manifest.name')
                  JSON_CONTENT=$(echo '{{inputs.parameters.global_params}}' | jq -r '.product_manifest.current_product.manifest')
                  LOFTSMAN_ENTRIES=$(echo "$JSON_CONTENT" | jq '.content.loftsman | length')
                  PARENT_PATH=$(echo '{{inputs.parameters.global_params}}' | jq -r '.stage_params."process-media".current_product.parent_directory')

                  if [[ -z "$LOFTSMAN_ENTRIES" ]]; then
                      echo "ERROR Did not receive any loftsman context."
                      exit 1
                  fi

                  deploy_manifest() {
                    manifest=$1
                    product_name=$2
                    exit_code=0

                    if ! cray artifacts get config-data argo/loftsman/${product_name}/manifests/"$(basename $manifest)" /tmp/"$(basename $manifest)"; then
                      echo "ERROR Could not get argo/loftsman/${product_name}/manifests/"$(basename $manifest)" from s3. It cannot be deployed because of this."
                      exit_code=1
                    else
                      echo "INFO Deploying ${manifest}"
                      if ! loftsman ship --manifest-path /tmp/"$(basename $manifest)" --charts-repo https://packages.local/repository/charts; then
                        echo "ERROR There was a problem deploying ${manifest}."
                        exit_code=1
                      fi
                    fi
                    return $exit_code
                  }

                  err=0
                  for (( i=0; i< $LOFTSMAN_ENTRIES; i++ )); do
                    path_exists=true
                    MANIFEST=$(echo "$JSON_CONTENT" | jq -r '.content.loftsman['$i'].path')
                    MANIFEST_PATH="${PARENT_PATH}/${MANIFEST}"
                    DEPLOY=$(echo "$JSON_CONTENT" | jq -r '.content.loftsman['$i'].deploy')
                    IS_DIR=false
                    if [ -d $MANIFEST_PATH ]; then
                      IS_DIR=true
                    elif [ -f $MANIFEST_PATH ]; then
                      IS_DIR=false
                    else
                      echo "ERROR Unable to find file or directory: $MANIFEST_PATH. (deploy=${DEPLOY})"
                      err=1
                      path_exists=false
                    fi
                    
                    if ! $path_exists; then
                      continue
                    elif [[ "$DEPLOY" = "true" ]] || [[ "$DEPLOY" = "True" ]]; then
                      if $IS_DIR; then
                        echo "INFO Deploying loftsman manifests under $MANIFEST/"
                        for manifest in "${MANIFEST_PATH}"/*.yml "${MANIFEST_PATH}"/*.yaml; do
                          deploy_manifest ${manifest} $PRODUCT_NAME
                          if [[ $? != 0 ]]; then err=1; fi
                        done
                      else
                        deploy_manifest $MANIFEST_PATH $PRODUCT_NAME
                        if [[ $? != 0 ]]; then err=1; fi
                      fi
                    else
                      echo "INFO Not deploying argo/loftsman/${PRODUCT_NAME}/manifests/$(basename ${MANIFEST}) becasue loftsman.deploy=${DEPLOY}."
                    fi
                  done

                  exit $err

                  
