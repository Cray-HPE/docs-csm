#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: preflight-checks-for-services
spec:
  volumes:
   - name: ca-bundle
     hostPath:
       path: /var/lib/ca-certificates
       type: Directory
  entrypoint: main
  templates:
    - name: main
      metrics:
        prometheus:
        - name: operation_counter
          help: "Count of step execution by result status"
          labels:
            - key: "opname"
              value: "preflight-checks-for-services"
            - key: stage
              value: "pre-install-check"
            - key: type
              value: "global"
            - key: pname
              value: "global"
            - key: pversion
              value: "global"
            - key: status
              value: "{{status}}"
          counter:
            value: "1"
      inputs:
        parameters:
          - name: auth_token
          - name: global_params
      dag:
        tasks:
          - name: start-operation
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template
          - name: preflight-checks
            dependencies:
              - start-operation
            templateRef: 
              name: iuf-base-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: false
                - name: scriptContent
                  value: |
                    error_flag=0

                    # check s3 
                    if ! cray artifacts list boot-images > /dev/null; then
                      echo "ERROR s3 is not operational."
                      error_flag=1
                    else
                      echo "INFO s3 is operational."
                    fi
                    
                    # check CFS
                    if ! cray cfs options list > /dev/null; then
                      echo "ERROR CFS is not operational."
                      error_flag=1
                    else
                      echo "INFO CFS is operational."
                    fi
                    
                    # check gitea VCS
                    vcs_user=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_username}} | base64 --decode)
                    vcs_pass=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_password}} | base64 --decode)
                    vcs_vers=$(curl -s https://api-gw-service-nmn.local/vcs/api/v1/version -u ${vcs_user}:${vcs_pass} | jq -r '. | .version')

                    if [[ -z $vcs_vers ]]; then
                      echo "ERROR VCS is not operational. This check will fail if VCS is unable to return the api version."
                      error_flag=1
                    else
                      echo "INFO VCS is operational."
                    fi
                    
                    # Check IMS
                    if ! cray ims images list > /dev/null; then
                      echo "ERROR IMS is not operational."
                      error_flag=1
                    else
                      echo "INFO IMS is operational."
                    fi

                    # check the operating status of Nexus
                    res_file=$(mktemp)
                    http_code=$(curl -s -o "${res_file}" -w "%{http_code}" "https://packages.local/service/rest/v1/status")
                    if [[ ${http_code} != 200 ]]; then
                      echo "ERROR Nexus is not healthy."
                      error_flag=1
                    else
                      echo "INFO Nexus is operational."
                    fi

                    # check for product catalog
                    if ! kubectl get cm cray-product-catalog -n services > /dev/null; then
                      echo "ERROR Cray Product Catalog configmap could not be found."
                      error_flag=1
                    else
                      echo "INFO Cray Product Catalog configmap exists."
                    fi

                    exit $error_flag
          - name: end-operation
            dependencies:
              - preflight-checks
            templateRef:
              name: workflow-template-record-time-template
              template: record-time-template      
          - name: prom-metrics
            dependencies:
              - start-operation
              - end-operation
            template: prom-metrics
            arguments:
              parameters:
              - name: opstart
                value: "{{tasks.start-operation.outputs.result}}"
              - name: opend
                value: "{{tasks.end-operation.outputs.result}}"
      volumeMounts:
        - name: ca-bundle
          mountPath: /var/lib/ca-certificates
    - name: prom-metrics
      inputs:
        parameters:
        - name: opstart
        - name: opend
      metrics:
        prometheus:
          - name: operation_time
            help: "Duration gauge by operation name in seconds"
            labels:
              - key: "opname"
                value: "preflight-checks-for-services"
              - key: stage
                value: "pre-install-check"
              - key: type
                value: "global"
              - key: pdname
                value: "global"
              - key: pdversion
                value: "global"
              - key: "opstart"
                value: "{{inputs.parameters.opstart}}"
              - key: "opend"
                value: "{{inputs.parameters.opend}}"
            gauge:
              value: "{{outputs.parameters.diff-time-value}}"
      outputs:
        parameters:
          - name: diff-time-value
            globalName: diff-time-value
            valueFrom:
              path: /tmp/diff_time.txt
      container:
        image: artifactory.algol60.net/csm-docker/stable/docker.io/alpine/git:2.32.0
        command: [sh, -c]
        args: ["DIFF_TIME=$(expr {{inputs.parameters.opend}} - {{inputs.parameters.opstart}}); echo $DIFF_TIME; echo $DIFF_TIME > /tmp/diff_time.txt"]
