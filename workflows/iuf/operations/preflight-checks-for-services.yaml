#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: preflight-checks-for-services
spec:
  volumes:
   - name: ca-bundle
     hostPath:
       path: /var/lib/ca-certificates
       type: Directory
  entrypoint: main
  templates:
    - name: main
      inputs:
        parameters:
          - name: auth_token
          - name: global_params
      dag:
        tasks:
          - name: preflight-checks
            templateRef: 
              name: iuf-base-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: false
                - name: scriptContent
                  value: |
                    error_flag=0

                    # check s3 
                    if ! cray artifacts list boot-images > /dev/null; then
                      echo "Error: s3 is not operational."
                      error_flag=1
                    else
                      echo "s3 is operational."
                    fi
                    
                    # check CFS
                    if ! cray cfs options list > /dev/null; then
                      echo "Error: CFS is not operational."
                      error_flag=1
                    else
                      echo "CFS is operational."
                    fi
                    
                    # check gitea VCS
                    tmpdir=$(mktemp -d)
                    pushd $tmpdir > /dev/null
                    gp=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_password}} 2> /dev/null | base64 --decode)
                    if ! git clone --depth 1 https://crayvcs:"${gp}"@api-gw-service-nmn.local/vcs/cray/cos-config-management.git &> /dev/null; then
                      echo "Error: VCS is not operational. This check will fail if there are not valid SSL certificates located at '/var/lib/ca-certificates'."
                      error_flag=1
                    else
                      echo "VCS is operational."
                    fi
                    popd > /dev/null
                    rm -rf $tmpdir
                    
                    # Check IMS
                    if ! cray ims images list > /dev/null; then
                      echo "Error: IMS is not operational."
                      error_flag=1
                    else
                      echo "IMS is operational."
                    fi

                    # check the operating status of Nexus
                    res_file=$(mktemp)
                    http_code=$(curl -s -o "${res_file}" -w "%{http_code}" "https://packages.local/service/rest/v1/status")
                    if [[ ${http_code} != 200 ]]; then
                      echo "Error: Nexus is not healthy."
                      error_flag=1
                    else
                      echo "Nexus is operational."
                    fi

                    # check for product catalog
                    if ! kubectl get cm cray-product-catalog -n services > /dev/null; then
                      echo "Error: Cray Product Catalog configmap could not be found."
                      error_flag=1
                    else
                      echo "Cray Product Catalog configmap exists."
                    fi

                    exit $error_flag
      volumeMounts:
        - name: ca-bundle
          mountPath: /var/lib/ca-certificates