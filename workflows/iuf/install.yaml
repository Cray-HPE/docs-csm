#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: iuf-install-
spec:
  podMetadata:
    annotations:
      sidecar.istio.io/inject: "false"    
  volumes:
    - name: iuf
      hostPath:
        path: /iuf
        type: Directory
    - name: ssh
      hostPath:
        path: /root/.ssh
        type: Directory
    - name: host-usr-bin
      hostPath:
        path: /usr/bin
        type: Directory
    - name: podinfo
      downwardAPI:
        items:
          - path: "labels"
            fieldRef:
              fieldPath: metadata.labels
          - path: "annotations"
            fieldRef:
              fieldPath: metadata.annotations
  # schedule workflow jobs asap
  priorityCLassName: system-node-critical
  # Pod GC strategy must be one of the following:
  # * OnPodCompletion - delete pods immediately when pod is completed (including errors/failures)
  # * OnPodSuccess - delete pods immediately when pod is successful
  # * OnWorkflowCompletion - delete pods when workflow is completed
  # * OnWorkflowSuccess - delete pods when workflow is successful
  podGC:
    strategy: OnPodCompletion
  # allow workflow jobs running on master node
  #   we may have a situation that all worker nodes
  #   are marked as "being rebuilt" (cray.nls=ncn-w001)
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      # try to use master nodes as much as possible
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 50
          preference:
            matchExpressions:
            - key: node-role.kubernetes.io/master
              operator: Exists
  nodeSelector:
    kubernetes.io/hostname: ncn-m001
  entrypoint: main
  templates:
    - name: main
      dag:
        tasks:
          # process each product defined in iuf session
          {{ range $indexProduct,$product := $.Products }}
          # generate tasks based on stages defined in iuf session
          # Special handling:
          #   1. rolling-reboot is a global step that should run only once
          #   2. post-install-check should happen:
          #       2.1 after rolling-reboot if it is defined
          #       2.1 after other stages if rolling-reboot is NOT defined 
            {{ range $indexStage,$stage := $.Stages }}
              {{ if and (ne $stage "rolling-reboot") (ne $stage "post-install-check") }}
                {{ if ne $stage "sat-bootprep" }}
          - name: {{$product.Name}}-{{$stage}}
            template: {{$stage}}
                  {{ if ne $indexStage 0 }}
            dependencies:
              - {{$product.Name}}-{{ index $.Stages (add $indexStage -1) }}
                  {{ end }}
            arguments: 
              parameters:
              - name: product
                value: {{$product.Name}}  
              - name: originalLocation
                value: {{$product.OriginalLocation}}
              - name: dryRun
                value: "{{$.DryRun}}"
                  {{ end }}
              {{ end }}
            {{ end }}
          {{ end }}

          # sat-bootprepif defined in iuf session
          {{ if has "sat-bootprep" $.Stages }}
          - name: sat-bootprep
            template: sat-bootprep
            dependencies:
              {{ range $indexProduct,$product := $.Products }}
                {{ range $indexStage,$stage := $.Stages }}
                  {{ if and (ne $stage "rolling-reboot") (ne $stage "post-install-check") }}
                    {{ if ne $stage "sat-bootprep" }}
              - {{$product.Name}}-{{$stage}}
                    {{ end }}
                  {{ end }}
                {{ end }}
              {{ end }}
            arguments: 
              parameters:
              - name: dryRun
                value:  "{{$.DryRun}}"
          {{ end }}

          # rolling-reboot if defined in iuf session
          {{ if has "rolling-reboot" $.Stages }}
          - name: rolling-reboot
            template: rolling-reboot
            dependencies:
              {{ if has "sat-bootprep" $.Stages }}
              - sat-bootprep
              {{ end }}
              {{ range $indexProduct,$product := $.Products }}
                {{ range $indexStage,$stage := $.Stages }}
                  {{ if and (ne $stage "rolling-reboot") (ne $stage "post-install-check") }}
                    {{ if ne $stage "sat-bootprep" }}
              - {{$product.Name}}-{{$stage}}
                    {{ end }}
                  {{ end }}
                {{ end }}
              {{ end }}
            arguments: 
              parameters:
              - name: dryRun
                value:  "{{$.DryRun}}"
          {{ end }}

          # post-install-check
          {{ if has "post-install-check" $.Stages }}
            {{ range $indexProduct,$product := $.Products }}
          - name: {{$product.Name}}-post-install-check
            template: post-install-check
            dependencies:
              {{ if has "rolling-reboot" $.Stages }}
              - rolling-reboot
              {{ else }}
                {{ range $indexStage,$stage := $.Stages }}
                  {{ if and (ne $stage "rolling-reboot") (ne $stage "post-install-validation") }}
              - {{$product.Name}}-{{$stage}}
                  {{ end }}
                {{ end }}
              {{ end }}
            arguments: 
              parameters:
              - name: product
                value: {{$product.Name}}  
              - name: dryRun
                value:  "{{$.DryRun}}"
            {{ end }}
          {{ end }}
    # reference to individual tasks, aka stages
    {{- include "process-media" . | indent 4 }}
    {{- include "pre-install-check" . | indent 4 }}
    {{- include "deliver-product" . | indent 4 }}
    {{- include "update-config" . | indent 4 }}
    {{- include "deploy-product" . | indent 4 }}
    {{- include "sat-bootprep" . | indent 4 }}
    {{- include "rolling-reboot" . | indent 4 }}
    {{- include "post-install-check" . | indent 4 }}
