#
# MIT License
#
# (C) Copyright 2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: iuf-base-template
  labels:
    version: "4.0.2"
spec:
  entrypoint: shell-script
  templates:
    - name: shell-script
      inputs:
       parameters:
         - name: scriptContent
           description: >
             The content of the script that will be run
         - name: dryRun
           description: >
             A flag indicating whether to run the script or not.
             True means do not run the script merely output it to a file.
         - name: script_output_file
           value: "/tmp/script_output"
           description: >
             The file containing any output the script chooses to write.
             Writing to this file is optional.
             This file's name is stored in the environment variable SCRIPT_OUTPUT_FILE,
             which is accessible to the script.
      outputs:
        parameters:
          - name: output
            description: >
              Output from the script
            valueFrom:
              path: "{{inputs.parameters.script_output_file}}"
      metadata:
        annotations:
          sidecar.istio.io/inject: "false"
      retryStrategy:
       limit: "2"
       retryPolicy: "Always"
       backoff:
         duration: "10s"       # Must be a string. Default unit is seconds. Could also be a Duration, e.g.: "2m", "6h", "1d"
         factor: "2"
         maxDuration: "1m"
      script:
        image: artifactory.algol60.net/csm-docker/stable/iuf:v0.1.11
        command: [sh]
        source: |
          #!/host_usr_bin/bash
          export PATH=$PATH:/host_usr_bin
          ts=$(echo $RANDOM | md5sum | head -c 20; echo)
          cat <<'EOF2' > "/tmp/${ts}.sh"
          set -e

          # construct kubeconfig file in the pod
          # this is so csi can use it too
          secret=`kubectl -n argo get serviceaccount/default -o jsonpath='{.secrets[0].name}'`
          token=`kubectl -n argo get secret $secret -o jsonpath='{.data.token}'| base64 -d`
          mkdir -p mykubeconfig
          cat << EOF > mykubeconfig/admin.conf
          apiVersion: v1
          kind: Config
          current-context: default
          contexts:
            - context:
                cluster: kubernetes
                user: default
                namespace: default
              name: default
          clusters:
            - cluster:
                server: https://kubeapi-vip.local:6442
                insecure-skip-tls-verify: true
              name: kubernetes
          users:
          - name: default
            user:
              token: ${token}
          EOF
          export KUBECONFIG=mykubeconfig/admin.conf
          chmod 600 mykubeconfig/admin.conf

          export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
            -d client_id=admin-client \
            -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
            https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')

          # initialize craycli
          API_GW="https://api-gw-service-nmn.local"
          ADMIN_SECRET=$(kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d)
          curl -k -s -d grant_type=client_credentials \
                 -d client_id=admin-client \
                 -d client_secret=$ADMIN_SECRET https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token > /tmp/setup-token.json
          export CRAY_CREDENTIALS=/tmp/setup-token.json
          cray init --hostname $API_GW --no-auth --overwrite > /dev/null

          # Create the output file.
          mkdir -p "$(dirname "{{inputs.parameters.script_output_file}}")"
          touch {{inputs.parameters.script_output_file}}

          # Run the script
          {{inputs.parameters.scriptContent}}
          EOF2
          chmod +x /tmp/${ts}.sh
          DRY_RUN={{inputs.parameters.dryRun}}
          if [[ "$DRY_RUN" == "true" ]];then
            echo "====================="
            echo "=======DRY RUN======="
            echo "====================="
            cat /tmp/${ts}.sh
            touch {{inputs.parameters.script_output_file}}
          else
            bash -e /tmp/${ts}.sh
          fi

          # make sure the output file is not empty otherwise Argo barfs

          if [ ! -s {{inputs.parameters.script_output_file}} ]; then
            echo "{}" | tee {{inputs.parameters.script_output_file}}
          fi
        env:
          - name: SCRIPT_OUTPUT_FILE
            value: "{{inputs.parameters.script_output_file}}"
        volumeMounts:
          # mount csi from host to docker
          # csi is go compiled so it can be used from host to container
          - name: host-usr-bin
            mountPath: /host_usr_bin
          - name: ca-bundle
            mountPath: /var/lib/ca-certificates
          - name: iuf
            mountPath: /etc/cray/upgrade/csm
