#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ceph-upgrade
  namespace: argo
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: dryRun
      dag:
        tasks:
          - name: upgrade-ceph-version
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: scriptContent
                  value: |
                    ssh_options="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
                    for storage_node in $(ceph orch host ls -f json |jq -r '.[].hostname'); do
                      if [[ -z $(ssh ${storage_node} ${ssh_options} 'cat /etc/os-release' | grep 'VERSION="15-SP5"') ]]; then
                        echo "Not all storage nodes have been upgraded and are running SP5."
                        echo "Waiting to upgrade Ceph until all storage nodes have been upgraded."
                        exit 0
                      fi
                    done
                    export TERM=linux
                    # setting PYTHONUNBUFFERED forces python to print output
                    export PYTHONUNBUFFERED=1
                    /usr/share/doc/csm/upgrade/scripts/ceph/ceph-upgrade-tool.py --version '17.2.6'
          - name: upgrade-ceph-monitoring-stack
            dependencies:
              - upgrade-ceph-version
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: scriptContent
                  value: |
                    ceph_version=$(ceph version --format json | jq '.version' | awk '{print $3}')
                    if [[ $ceph_version == '17.2.6' ]]; then
                      echo "Upgrading the Ceph monitoring stack."
                      ssh_options="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
                      for storage_node in $(ceph orch host ls -f json |jq -r '.[].hostname'); do
                        scp /usr/share/doc/csm/upgrade/scripts/ceph/ceph-upgrade-monitoring-stack.sh ${storage_node}:/srv/cray/scripts/common/ceph-upgrade-monitoring-stack.sh
                        ssh ${storage_node} ${ssh_options} "chmod +x /srv/cray/scripts/common/ceph-upgrade-monitoring-stack.sh; /srv/cray/scripts/common/ceph-upgrade-monitoring-stack.sh"
                        break
                      done
                    else
                      echo "Ceph is not running version '17.2.6' yet. Waiting to upgrade the Ceph monitoring stack until Ceph has been upgraded."
                    fi
