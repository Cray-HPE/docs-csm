#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: wipe-and-reboot-worker
  namespace: argo
spec:
  entrypoint: main
  templates:
    - name: main
      inputs:
        parameters:
          - name: targetNcn
          - name: dryRun
          - name: imageId
          - name: desiredCfsConfig
          - name: bootTimeoutInSeconds
      dag:
        tasks:
        - name: wait-for-keycloak
          templateRef:
            name: kubectl-and-curl-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  client_secret=$(kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d)
                  echo "Sleeping for 60 seconds to let keycloak settle after node drain"
                  sleep 60
                  count=0
                  total=120
                  sleep=5
                  while true; do
                    http_code=$(curl -k -s -S -o /dev/null -w '%{http_code}' -d grant_type=client_credentials -d client_id=admin-client \
                        -d client_secret="$client_secret" https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token || true)
                    if [ "${http_code}" == "200" ]; then
                      echo "keycloak is up"
                      break
                    else
                      if [ "${count}" == "${total}" ]; then
                          echo "keycloak is down after ${total} checks, giving up ..."
                          exit 1
                      fi
                      count=$(($count + 1))
                      echo "keycloak is down, sleeping for $sleep seconds and retry, attempt $count/$total ..."
                      sleep $sleep
                    fi
                  done
        - name: "validate-bss-ntp"
          dependencies:
          - wait-for-keycloak
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  curl -k -s -d grant_type=client_credentials \
                      -d client_id=admin-client \
                      -d client_secret="$(kubectl get secrets admin-client-auth -ojsonpath='{.data.client-secret}' | base64 -d)" \
                      https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token > /tmp/setup-token.json
                  export CRAY_CREDENTIALS=/tmp/setup-token.json
                  TOKEN=$(jq -r '.access_token' /tmp/setup-token.json)
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                  
                  if ! cray bss bootparameters list --hosts $TARGET_XNAME --format json | jq '.[] |."cloud-init"."user-data".ntp' | grep -q '/etc/chrony.d/cray.conf'; then
                    echo "${TARGET_NCN} is missing NTP data in BSS. Please see the procedure which can be found in the 'Known Issues and Bugs' section titled 'Fix BSS Metadata' on the 'Configure NTP on NCNs' page of the CSM documentation."
                    exit 1
                  else
                    echo "Successfully found ${TARGET_NCN} NTP data is present in BSS."
                  fi
        - name: "get-bootscript-last-access-timestamp"
          dependencies:
            - validate-bss-ntp
          templateRef:
            name: kubectl-and-curl-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                  
                  csi handoff bss-update-param --set metal.no-wipe=0 --limit $TARGET_XNAME
                  bootscript_last_epoch=$(curl -s -k -H "Content-Type: application/json" \
                  -H "Authorization: Bearer ${TOKEN}" \
                  "https://api-gw-service-nmn.local/apis/bss/boot/v1/endpoint-history?name=$TARGET_XNAME" \
                  | jq '.[]| select(.endpoint=="bootscript")|.last_epoch' 2> /dev/null)
                  
                  if [[ $bootscript_last_epoch -gt 0 ]]; then
                    echo $bootscript_last_epoch
                  else
                    # sometimes we don't have endpoint history
                    # because a node might never pxe booted in the past
                    # we set it to zero as default value
                    bootscript_last_epoch=0
                    echo $bootscript_last_epoch
                  fi
        - name: set-next-boot-to-pxe
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN={{inputs.parameters.targetNcn}}

                  cat <<'EOF' > set-next-boot-to-pxe.sh
                    efibootmgr # print before
                    efibootmgr | grep -P '(UEFI OS|cray)' | awk -F'[^0-9]*' '{print $0}' | sed 's/^Boot//g' | awk '{print $1}' | tr -d '*' | xargs -r -i efibootmgr -b {} -B
                    efibootmgr # print after
                    echo 'Setting next boot to PXE ... '
                    ipmitool chassis bootdev pxe options=efiboot
                    mount -L BOOTRAID -T /etc/fstab.metal
                    rm -rf /metal/recovery/*
                  EOF
                  
                  chmod +x set-next-boot-to-pxe.sh
                  scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null set-next-boot-to-pxe.sh $TARGET_NCN:/tmp/set-next-boot-to-pxe.sh
                  ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $TARGET_NCN '/tmp/set-next-boot-to-pxe.sh'
        - name: "pxe-boot-node"
          dependencies:
            - get-bootscript-last-access-timestamp
            - set-next-boot-to-pxe
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                  TARGET_MGMT_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                    jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Parent")
                  TARGET_NCN_mgmt_host="${TARGET_NCN}-mgmt"
                  export IPMI_USERNAME=$(curl -XGET -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/scsd/v1/bmc/creds"| jq -r ".Targets[] | select(.Xname | contains(\"$TARGET_MGMT_XNAME\")) | .Username")
                  export IPMI_PASSWORD=$(curl -XGET -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/scsd/v1/bmc/creds"| jq -r ".Targets[] | select(.Xname | contains(\"$TARGET_MGMT_XNAME\")) | .Password")
                                    
                  # Set ncn to pxe boot
                  ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis bootdev pxe options=efiboot
                  
                  powerStatus=$(ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis power status)
                  if [[ "$powerStatus" == *"is on"* ]]; then
                    # power cycle node
                    ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis power off
                    sleep 20
                  fi
                  ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis power on
        - name: "wait-for-boot"
          dependencies:
            - pxe-boot-node
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')

                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                  TARGET_MGMT_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Parent")
                  TARGET_NCN_mgmt_host="${TARGET_NCN}-mgmt"
                  export IPMI_USERNAME=$(curl -XGET -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/scsd/v1/bmc/creds"| jq -r ".Targets[] | select(.Xname | contains(\"$TARGET_MGMT_XNAME\")) | .Username")
                  export IPMI_PASSWORD=$(curl -XGET -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/scsd/v1/bmc/creds"| jq -r ".Targets[] | select(.Xname | contains(\"$TARGET_MGMT_XNAME\")) | .Password")

                  bootscript_last_epoch="{{tasks.get-bootscript-last-access-timestamp.outputs.result}}"
                  # wait for boot
                  counter=0
                  echo "waiting for boot: $TARGET_NCN ..."
                  while true
                  do
                      set +e
                      while true
                      do
                          tmp_bootscript_last_epoch=$(curl -s -k -H "Content-Type: application/json" \
                              -H "Authorization: Bearer ${TOKEN}" \
                              "https://api-gw-service-nmn.local/apis/bss/boot/v1/endpoint-history?name=$TARGET_XNAME" \
                              | jq '.[]| select(.endpoint=="bootscript")|.last_epoch' 2> /dev/null)
                          if [[ $? -eq 0 ]]; then
                              break
                          fi
                      done
                      set -e
                      if [[ $tmp_bootscript_last_epoch -ne $bootscript_last_epoch ]]; then
                          echo "bootscript fetched"
                          break
                      fi

                      echo "waiting for boot: $TARGET_NCN ..."
                      counter=$((counter+1))
                      if [ $counter -gt {{inputs.parameters.bootTimeoutInSeconds}} ]; then
                          counter=0
                          ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis power cycle
                          echo "Boot timeout, power cycle again"
                      fi
                      sleep 1
                  done
        - name: "wait-for-cloud-init"
          dependencies:
            - wait-for-boot
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN={{inputs.parameters.targetNcn}}

                  # wait random seconds (1-10s) until ssh is working
                  echo "wait for ssh ..."
                  while ! ssh "${TARGET_NCN}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null 'ls /var/log/cloud-init-output.log'
                  do
                    echo "wait for ssh ..."
                    sleep $(( ( RANDOM % 10 )  + 1 ))
                  done

                  # wait for cloud-init
                  # ssh commands are expected to fail for a while, so we temporarily disable set -e
                  set +e
                  echo "waiting for cloud-init: $TARGET_NCN ..."
                  while true ; do
                      ssh "${TARGET_NCN}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null 'cat /var/log/cloud-init-output.log | grep "The system is finally up"' &> /dev/null && break
                      echo "waiting for cloud-init: $TARGET_NCN ..."
                      sleep 20
                  done
                  # Restore set -e
                  set -e
        - name: "wait-for-k8s"
          dependencies:
            - wait-for-boot
          templateRef:
            name: kubectl-and-curl-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN={{inputs.parameters.targetNcn}}

                  set +e
                  echo "waiting for k8s: $TARGET_NCN ..."
                  MAX_RETRY=120
                  n=0
                  until csi automate ncn kubernetes --action is-member --ncn $TARGET_NCN --kubeconfig mykubeconfig/admin.conf
                  do
                      n=$((n+1))
                      if [[ $n -ge $MAX_RETRY ]]; then
                          # Restore set -e
                          set -e
                          exit 1
                      fi
                      sleep 5
                  done
        - name: "cray-cli-init"
          dependencies:
            - wait-for-cloud-init
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  ssh ${TARGET_NCN} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null 'cray init --no-auth --overwrite --hostname https://api-gw-service-nmn.local --tenant ""'
      
