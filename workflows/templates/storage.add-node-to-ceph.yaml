#
# MIT License
#
# (C) Copyright 2022-2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: add-storage-node-to-ceph
  namespace: argo
spec:
  entrypoint: main
  templates:
    - name: main
      inputs:
        parameters:
          - name: targetNcn
          - name: dryRun
          - name: workflowType
      dag:
        tasks:
          - name: update-ssh-keys
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: scriptContent
                  value: |
                    TARGET_NCN="{{inputs.parameters.targetNcn}}"
                    TARGET_NCN_ip=$(host ${TARGET_NCN} | awk '{ print $NF }')
                    echo "Updating ssh keys to rebuilt/upgraded node"
                    
                    function ssh_keygen_keyscan() {
                      set +e
                      local target_ncn ncn_ip known_hosts
                      known_hosts="/root/.ssh/known_hosts"
                      sed -i 's@pdsh.*@@' $known_hosts
                      target_ncn="$1"
                      ncn_ip=$(host ${target_ncn} | awk '{ print $NF }')
                      [ -n "${ncn_ip}" ]
                      # Because we run with set +e in this function, check return codes after running commands
                      [ $? -ne 0 ] && return 1
                      echo "Updating SSH keys for node ${target_ncn} with IP address of ${ncn_ip}"
                      ssh-keygen -R "${target_ncn}" -f "${known_hosts}" > /dev/null 2>&1
                      [ $? -ne 0 ] && return 1
                      ssh-keygen -R "${ncn_ip}" -f "${known_hosts}" > /dev/null 2>&1
                      [ $? -ne 0 ] && return 1
                      ssh-keyscan -H "${target_ncn},${ncn_ip}" > /dev/null 2>&1 >> "${known_hosts}"
                      res=$?

                      # remove the old authorized_hosts entry for the target NCN cluster-wide
                      {
                          NCNS=$(grep -oP 'ncn-w\w\d+|ncn-s\w\d+' /etc/hosts | sort -u)
                          HOSTS=$(echo $NCNS | tr -t ' ' ',')
                          pdsh -w $HOSTS ssh-keygen -R ${target_ncn}
                          pdsh -w $HOSTS ssh-keygen -R ${ncn_ip}
                      } >& /dev/null

                      set -e
                      return $res
                    }

                    ssh_keygen_keyscan "${TARGET_NCN}"
                    # Add ssh keys to ncn-s00[1/2/3]
                    for node in "ncn-s001" "ncn-s002" "ncn-s003"; do
                      ssh $node "ssh-keyscan -H ${TARGET_NCN},${TARGET_NCN_ip} >> ~/.ssh/known_hosts"
                    done
          - name: pull-images-from-nexus
            templateRef:
              name: ssh-template
              template: shell-script
            dependencies:
              - update-ssh-keys
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: scriptContent
                  value: |
                    TARGET_NCN="{{inputs.parameters.targetNcn}}"
                    for container in "container_image_prometheus" "container_image_node_exporter" "container_image_alertmanager" "container_image_grafana"; do
                        image=$(ceph config get mgr mgr/cephadm/${container})
                        ssh ${TARGET_NCN} podman pull $image
                    done
                    active_mgr=$(ceph mgr dump | jq -r .active_name)
                    active_mgr_version=$(ceph orch ps -f json | jq --arg MGR $active_mgr '.[] | select(.daemon_name | contains($MGR)) | .version' | tr -d '"')
                    ssh ${TARGET_NCN} podman pull "registry.local/artifactory.algol60.net/csm-docker/stable/quay.io/ceph/ceph:v${active_mgr_version}"
          - name: copy-ceph-pub
            templateRef:
              name: ssh-template
              template: shell-script
            dependencies:
              - update-ssh-keys
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: scriptContent
                  value: |
                    TARGET_NCN="{{inputs.parameters.targetNcn}}"
                    ceph cephadm get-pub-key > ~/ceph.pub
                    ssh-copy-id -f -i ~/ceph.pub root@${TARGET_NCN}
          - name: restore-ceph-files-for-upgrade
            when: "{{inputs.parameters.workflowType}} == upgrade"
            dependencies:
              - update-ssh-keys
            template: restore-ceph-files-from-tar
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: targetNcn
                  value: "{{inputs.parameters.targetNcn}}"
          - name: restore-ceph-files-for-rebuild
            when: "{{inputs.parameters.workflowType}} == rebuild"
            dependencies:
              - update-ssh-keys
            template: copy-ceph-files-from-storage-node
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: targetNcn
                  value: "{{inputs.parameters.targetNcn}}"
          - name: add-host
            depends: "copy-ceph-pub && pull-images-from-nexus && (restore-ceph-files-for-upgrade || restore-ceph-files-for-rebuild)"
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: scriptContent
                  value: |
                    TARGET_NCN="{{inputs.parameters.targetNcn}}"
                    ceph orch host add $TARGET_NCN
                    sleep 5
                    ceph orch host label rm $TARGET_NCN _no_schedule
          - name: redeploy-daemons
            when: "{{inputs.parameters.workflowType}} == upgrade"
            dependencies:
              - add-host
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
                - name: dryRun
                  value: "{{inputs.parameters.dryRun}}"
                - name: scriptContent
                  value: |
                    TARGET_NCN="{{inputs.parameters.targetNcn}}"
                    sleep 20
                    to_restart=$(ceph orch ps ${TARGET_NCN} | grep ${TARGET_NCN} | awk '{print $1}')
                    for each in $to_restart; do
                      ceph orch daemon redeploy $each
                    done
          
    ### Templates referenced by main DAG
    # this is used when a storage node is being rebuilt
    - name: copy-ceph-files-from-storage-node
      inputs:
        parameters:
          - name: dryRun
          - name: targetNcn
      dag:
        tasks:
          - name: copy-ceph-files
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN="{{inputs.parameters.targetNcn}}"
                  for node in ncn-s001 ncn-s002 ncn-s003; do
                    if [[ "$TARGET_NCN" == "$node" ]]; then
                      continue
                    else
                      if [[ "$TARGET_NCN" =~ ^("ncn-s001"|"ncn-s002"|"ncn-s003")$ ]]
                      then
                        scp $node:/etc/ceph/\{rgw.pem,ceph.conf,ceph_conf_min,ceph.client.ro.keyring,ceph.client.admin.keyring\} ${TARGET_NCN}:/etc/ceph
                      else
                        scp $node:/etc/ceph/\{rgw.pem,ceph.conf,ceph_conf_min,ceph.client.ro.keyring\}  ${TARGET_NCN}:/etc/ceph/
                      fi
                      break
                    fi
                  done
                  # copy ceph.client.ro.keyring
                  if ! $(ceph auth get client.ro >/dev/null 2>/dev/null); then
                    ceph-authtool -C /etc/ceph/ceph.client.ro.keyring -n client.ro --cap mon 'allow r' --cap mds 'allow r' --cap osd 'allow r' --cap mgr 'allow r' --gen-key
                  fi
                  if [ -f "/etc/ceph/ceph.client.ro.keyring" ]; then
                    ceph auth import -i /etc/ceph/ceph.client.ro.keyring
                  else
                    ceph auth get client.ro -o /etc/ceph/ceph.client.ro.keyring
                    ceph auth import -i /etc/ceph/ceph.client.ro.keyring
                  fi
                  for node in $(ceph orch host ls --format=json|jq -r '.[].hostname'); do scp /etc/ceph/ceph.client.ro.keyring $node:/etc/ceph/ceph.client.ro.keyring; done
                  scp /etc/ceph/ceph.client.ro.keyring ${TARGET_NCN}:/etc/ceph/ceph.client.ro.keyring
    # this is used when a storage node is being upgraded
    - name: restore-ceph-files-from-tar
      inputs:
        parameters:
          - name: dryRun
          - name: targetNcn
      dag:
        tasks:
          - name: restore-ceph-files
            templateRef:
              name: ssh-template
              template: shell-script
            arguments:
              parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN="{{inputs.parameters.targetNcn}}"
                  scp ./${TARGET_NCN}-ceph.tgz $TARGET_NCN:/
                  ssh ${TARGET_NCN} 'cd /; tar -xvf ./$(hostname)-ceph.tgz; rm /$(hostname)-ceph.tgz'
                  # check that files are correctly on TARGET_NCN
                  ceph_files=$(ssh ${TARGET_NCN} 'ls /etc/ceph')
                  if [[ -z $(echo ${ceph_files} | grep 'rgw.pem') ]] || [[ -z $(echo ${ceph_files} | grep 'ceph.client.ro.keyring') ]]; then
                    # ceph files are missing, try recopying the tar file over
                    scp ./${TARGET_NCN}-ceph.tgz $TARGET_NCN:/
                    ssh ${TARGET_NCN} 'cd /; tar -xvf ./$(hostname)-ceph.tgz; rm /$(hostname)-ceph.tgz'
                  else
                    # ceph files are there so exit
                    exit 0
                  fi
                  # check that files are correctly on TARGET_NCN
                  ceph_files=$(ssh ${TARGET_NCN} 'ls /etc/ceph')
                  if [[ -z $(echo ${ceph_files} | grep 'rgw.pem') ]] || [[ -z $(echo ${ceph_files} | grep 'ceph.client.ro.keyring') ]]; then
                    # ceph files are missing, copy files from another node
                    echo "WARN unable to untar ${TARGET_NCN}-ceph.tgz on ${TARGET_NCN}. Copying neccessary Ceph files from another node instead of getting them from tar file."
                    for node in ncn-s001 ncn-s002 ncn-s003; do
                      if [[ "$TARGET_NCN" == "$node" ]]; then
                        continue
                      else
                        if [[ "$TARGET_NCN" =~ ^("ncn-s001"|"ncn-s002"|"ncn-s003")$ ]]
                        then
                          scp $node:/etc/ceph/\{rgw.pem,ceph.conf,ceph_conf_min,ceph.client.ro.keyring,ceph.client.admin.keyring\} ${TARGET_NCN}:/etc/ceph
                        else
                          scp $node:/etc/ceph/\{rgw.pem,ceph.conf,ceph_conf_min,ceph.client.ro.keyring\}  ${TARGET_NCN}:/etc/ceph/
                        fi
                        break
                      fi
                    done
                  else
                    # ceph files are there so exit
                    exit 0
                  fi
                  ceph_files=$(ssh ${TARGET_NCN} 'ls /etc/ceph')
                  if [[ -z $(echo ${ceph_files} | grep 'rgw.pem') ]] || [[ -z $(echo ${ceph_files} | grep 'ceph.client.ro.keyring') ]]; then
                    echo "ERROR neccessary Ceph files were not copied to ${TARGET_NCN}. Manually try to populate ${TARGET_NCN}:/etc/ceph with the same files seen in /etc/ceph other storage nodes."
                    exit 1
                  else
                    echo "INFO /etc/ceph files were successfully copied to ${TARGET_NCN} from another storage node."
                    exit 0
                  fi
