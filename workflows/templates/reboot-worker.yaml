#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: reboot-worker
  namespace: argo
spec:
  entrypoint: main
  templates:
    - name: main
      inputs:
        parameters:
          - name: targetNcn
          - name: dryRun
      dag:
        tasks:
        - name: "validate-bss-ntp"
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                  
                  if ! cray bss bootparameters list --hosts $TARGET_XNAME --format json | jq '.[] |."cloud-init"."user-data".ntp' | grep -q '/etc/chrony.d/cray.conf'; then
                    echo "${TARGET_NCN} is missing NTP data in BSS. Please see the procedure which can be found in the 'Known Issues and Bugs' section titled 'Fix BSS Metadata' on the 'Configure NTP on NCNs' page of the CSM documentation."
                    exit 1
                  else
                    echo "Successfully found ${TARGET_NCN} NTP data is present in BSS."
                  fi
        - name: "set-metal-no-wipe"
          dependencies:
            - validate-bss-ntp
          templateRef:
            name: kubectl-and-curl-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                  
                  csi handoff bss-update-param --set metal.no-wipe=0 --limit $TARGET_XNAME
        - name: "reboot-node"
          dependencies:
            - set-metal-no-wipe
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                      jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
                  TARGET_MGMT_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                    jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Parent")
                  TARGET_NCN_mgmt_host="${TARGET_NCN}-mgmt"
                  export IPMI_USERNAME=$(curl -XGET -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/scsd/v1/bmc/creds"| jq -r ".Targets[] | select(.Xname | contains(\"$TARGET_MGMT_XNAME\")) | .Username")
                  export IPMI_PASSWORD=$(curl -XGET -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/scsd/v1/bmc/creds"| jq -r ".Targets[] | select(.Xname | contains(\"$TARGET_MGMT_XNAME\")) | .Password")
                                    
                  powerStatus=$(ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis power status)
                  if [[ "$powerStatus" == *"is on"* ]]; then
                    # power cycle node
                    ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis power off
                    sleep 20
                  fi
                  ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis power on
        - name: "wait-for-k8s"
          dependencies:
            - reboot-node
          templateRef:
            name: kubectl-and-curl-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN={{inputs.parameters.targetNcn}}

                  set +e
                  echo "waiting for k8s: $TARGET_NCN ..."
                  MAX_RETRY=120
                  n=0
                  until csi automate ncn kubernetes --action is-member --ncn $TARGET_NCN --kubeconfig mykubeconfig/admin.conf
                  do
                      n=$((n+1))
                      if [[ $n -ge $MAX_RETRY ]]; then
                          # Restore set -e
                          set -e
                          exit 1
                      fi
                      sleep 5
                  done
        - name: "cray-cli-init"
          dependencies:
            - wait-for-cloud-init
          templateRef:
            name: ssh-template
            template: shell-script
          arguments:
            parameters:
              - name: dryRun
                value: "{{inputs.parameters.dryRun}}"
              - name: scriptContent
                value: |
                  TARGET_NCN={{inputs.parameters.targetNcn}}
                  ssh ${TARGET_NCN} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null 'cray init --no-auth --overwrite --hostname https://api-gw-service-nmn.local --tenant ""'
      