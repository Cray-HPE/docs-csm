#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: cray-nls.hpe.com/v1
kind: Hook
metadata:
  name: move-critical-singleton-pods
  labels:
    before-all: "true"
spec:
  scriptContent: |
    targetNcns="{{inputs.parameters.targetNcns}}"
    echo "targetNcns: $targetNcns"
    # example input of targetNcns: [ncn-w001 ncn-w002 ncn-w003]
    # remove '[' and ']'
    targetNcns=${targetNcns:1:-1}
    # convert to array
    targetNcnsArray=($targetNcns)
    # set last rebuilding worker to nodeMoveTo
    nodeMoveTo=${targetNcnsArray[-1]}
    echo "last worker node to be rebuilt: $nodeMoveTo"
    # try to find a node that is not in targetNcns
    nodes=$(kubectl get nodes | grep "ncn-w" | awk '{print $1}')
    for node in $nodes;do
      if [[ $targetNcns == *$node* ]]; then
        echo "skip $node"
      else
        nodeMoveTo=${node}
        break
      fi
    done

    echo

    containerNames=( "nexus" "ipxe" "kea" "cray-cfs-api-db" )
    for containerName in ${containerNames[@]};do
      # get pod name by container name
      podName=$(kubectl get pods -A -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.phase}{"\t"}{range .spec.containers[*]}{.name}{"\t"}{end}{"\n"}{end}' | grep -E "^[^[:space:]]+[[:space:]]+Running[[:space:]]+.*${containerName}.*$" | cut -f1)
      if [[ -z $podName ]];then
        echo "Couldn't not find pod: $pod"
        echo "something is wrong"
        exit 1
      fi                 
      
      currentNode=$(kubectl get po -A -o wide | grep $podName | awk '{print $8}')
      if [[ "$nodeMoveTo" != "$currentNode" ]]; then
        echo "Move Pod: $podName to Node: $nodeMoveTo"
        /opt/cray/platform-utils/move_pod.sh $podName $nodeMoveTo > /dev/null
      fi

      podName=$(kubectl get pods --all-namespaces | awk '{print $2}' | grep $pod)
      ns=$(kubectl get po -A | grep $podName | awk '{print $1}')
      kubectl wait --for=condition=ready pod $podName -n $ns --timeout=5m
    done
  templateRefName: ssh-template
