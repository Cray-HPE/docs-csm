#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: cray-nls.hpe.com/v1
kind: Hook
metadata:
  name: move-critical-singleton-pods
  labels:
    before-all: "true"
spec:
  scriptContent: |
    #!/bin/sh
    echo "targetNcns: $TARGET_NCNS"
    # example input of TARGET_NCNS: [ncn-w001 ncn-w002 ncn-w003]
    # remove '[' and ']'
    targetNcns=${TARGET_NCNS:1:-1}
    # convert to array
    targetNcnsArray=($targetNcns)
    # set last rebuilding worker to nodeMoveTo
    nodeMoveTo=${targetNcnsArray[-1]}
    echo "last worker node to be rebuilt: $nodeMoveTo"
    # try to find a node that is not in targetNcns
    nodes=$(kubectl get nodes | grep "ncn-w" | awk '{print $1}')
    for node in $nodes;do
      if [[ $targetNcns == *$node* ]]; then
        echo "skip $node"
      else
        nodeMoveTo=${node}
        break
      fi
    done

    echo

    criticalPodLabels=( "app=nexus" "app.kubernetes.io/name=cray-ipxe-x86-64" "app.kubernetes.io/name=cray-dhcp-kea" "app.kubernetes.io/name=cray-cfs-api-db" )
    for label in ${criticalPodLabels[@]};do
      pods=($(kubectl get pods -A -l ${label} -o custom-columns=:.metadata.name))
      # we may have multiple pods matched with the label
      # log error and exit on matching multiple pods
      if [[ ${#pods[@]} -ne 1 ]]; then
        echo "ERROR: label: ${label} matches zero/multiple pods"
        exit 1
      fi
      podName=${pods[0]}
      currentNode=$(kubectl get po -A -o wide | grep $podName | awk '{print $8}')
      ns=$(kubectl get po -A | grep $podName | awk '{print $1}')
      if [[ $targetNcns != *$currentNode* ]]; then
        echo "$podName is on $currentNode and that node is not being rebuilt by this workflow. Not moving $podName."
      elif [[ "$nodeMoveTo" != "$currentNode" ]]; then
        echo "Move Pod: $podName to Node: $nodeMoveTo"
        /opt/cray/platform-utils/move_pod.sh $podName $nodeMoveTo > /dev/null
      fi

      kubectl wait --for=condition=ready pod -l ${label} -n $ns --timeout=5m
    done
  templateRefName: ssh-template
