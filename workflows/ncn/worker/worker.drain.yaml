#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
{{define "worker.drain"}}
tasks:
  - name: wait-for-cfs
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}
            TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")

            while true; do
              RESULT=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=pending" | jq length)
              if [[ "$RESULT" -eq 0 ]]; then
                break
              fi
              echo "Waiting for configuration to complete.  ${RESULT} components remaining."
              sleep 30
            done

            CONFIGURED=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=configured" | jq length)
            FAILED=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=failed" | jq length)
            echo "Configuration complete. $CONFIGURED component(s) completed successfully.  $FAILED component(s) failed."
            if [ "$FAILED" -ne "0" ]; then
              echo "The following components failed: $(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=failed"  | jq -r '. | map(.id) | join(",")')"
              exit 1
            fi
            
  - name: ensure-etcd-pods-are-healthy
    templateRef:
      name: ssh-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            while [[ "$(kubectl get po -A -l 'app=cray-etcd-operator-etcd-operator-etcd-operator' | grep -v "Running"| wc -l)" != "1" ]]; do
                echo "Etcd operator is not in running state, wait for 5s ..."
                kubectl get po -A -l 'app=cray-etcd-operator-etcd-operator-etcd-operator' | grep -v "Running"
                sleep 5
            done

            export GOSS_BASE=/opt/cray/tests/install/ncn
            GOSS_ARG="--vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate \
              --retry-timeout 1h \
              --sleep 1m"

            goss -g /opt/cray/tests/install/ncn/tests/goss-cray-service-etcd-health-check.yaml  ${GOSS_ARG}

            while [[ "$(kubectl get po -A -l 'app=etcd' | grep -v "Running"| wc -l)" != "1" ]]; do
                echo "Some etcd pods are not in running state, wait for 5s ..."
                kubectl get po -A -l 'app=etcd' | grep -v "Running"
                sleep 5
            done

            etcdClusters=$(kubectl get Etcdclusters -n services | grep "cray-"|awk '{print $1}')
            for cluster in $etcdClusters
            do
                while true; do
                  numOfPods=$(kubectl get pods -A -l 'app=etcd'| grep $cluster | grep "Running" | wc -l)
                  if [[ $numOfPods -ne 3 ]];then
                    echo "ERROR - Etcd cluster: $cluster should have 3 pods running but only $numOfPods are running"
                    continue
                  else
                    echo "Etcd cluster: $cluster have 3 pods running"
                    break
                  fi
                done
            done
  - name: ensure-pg-pods-are-healthy
    templateRef:
      name: ssh-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            export GOSS_BASE=/opt/cray/tests/install/ncn
            GOSS_ARG="--vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate \
              --retry-timeout 1h \
              --sleep 1m"
            
            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-leader.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-clusters-running.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-pods-running.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-replication-lag.yaml ${GOSS_ARG}
  - name: drain
    dependencies:
      - wait-for-cfs
      - ensure-etcd-pods-are-healthy
      - ensure-pg-pods-are-healthy
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            kubectl get node {{ `{{inputs.parameters.targetNcn}}` }} || res=$?
            # only delete a ncn that exists in cluster
            if [[ $res -eq 0 ]]; then
              /host_usr_bin/csi automate ncn kubernetes --action delete-ncn --ncn {{ `{{inputs.parameters.targetNcn}}` }} --kubeconfig mykubeconfig/admin.conf
            fi
  - name: update-bss
    dependencies:
      - wait-for-cfs
      - ensure-etcd-pods-are-healthy
      - ensure-pg-pods-are-healthy
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}
            TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
            /host_usr_bin/csi handoff bss-update-param --delete metal.no-wipe --limit $TARGET_XNAME
            /host_usr_bin/csi handoff bss-update-param --set metal.no-wipe=0 --limit $TARGET_XNAME
{{end}}