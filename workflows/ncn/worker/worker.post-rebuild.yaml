#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
{{define "worker.post-rebuild"}}
tasks:
  - name: update-bss-no-wipe
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            {{- include "lib.sh" | indent 12 }}

            trap libcleanup EXIT

            tmpfile=$(libtmpfile update-bss-no-wipe)

            TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}

            # REVIEW: Fatal if curl fails here?
            curl --output "${tmpfile}" --header "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management"

            # REVIEW: Fatal if jq fails?
            TARGET_XNAME=$(jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname" "${tmpfile}")
            /host_usr_bin/csi handoff bss-update-param --set metal.no-wipe=1 --limit $TARGET_XNAME
  - name: wait-for-cfs-after-rebuild
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            {{- include "lib.sh" | indent 12 }}

            trap libcleanup EXIT

            tmpfile=$(libtmpfile update-bss-no-wipe)

            TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}

            # REVIEW: Default fatal
            curl --output "${tmpfile}" --header "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management"

            # REVIEW: Default fatal
            TARGET_XNAME=$(jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname" "${tmpfile}")

            # REVIEW: No longer needed, and likely shouldn't be used
            set -o pipefail

            # Wait for component to become enabled (this should happen whether or not there is a desired configuration)
            while true; do
                # Retry CFS command if needed
                COUNT=0
                while true; do
                    # REVIEW: In a retry loop so we'll use the non exit() version of hooks
                    #shellcheck disable=SC2034
                    CURLFN=curlretry

                    curl --output "${tmpfile}" --header "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components/${TARGET_XNAME}"

                    # REVIEW: In a retry loop so we'll use the non exit() version of hooks
                    #shellcheck disable=SC2034
                    JQTESTFAILFN=jqretry

                    ENABLED=$(jq -r '.enabled' "${tmpfile}") && break
                    let COUNT+=1
                    if [[ ${COUNT} -gt 12 ]]; then
                        echo "ERROR: Even after retries, command pipeline failed querying CFS component '${TARGET_XNAME}'"
                        exit 1
                    fi
                    echo "WARNING: Command pipeline failed querying CFS component '${TARGET_XNAME}'. Retrying after 5 seconds."
                    sleep 5
                done
                if [[ ${ENABLED} == false ]]; then
                    echo "CFS component '${TARGET_XNAME}' still not enabled. Checking again after 30 seconds."
                    sleep 30
                    continue
                elif [[ ${ENABLED} != true ]]; then
                    echo "ERROR: Unexpected contents of 'enabled' field for CFS component '${TARGET_XNAME}': '${ENABLED}'"
                    exit 1
                fi
                echo "CFS component '${TARGET_XNAME}' is enabled"
                break
            done

            # Retry CFS command if needed
            COUNT=0
            while true; do
                # REVIEW: In a retry loop so we'll use the non exit() version of hooks
                #shellcheck disable=SC2034
                CURLFN=curlretry

                curl --output "${tmpfile}" "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components/${TARGET_XNAME}"

                # REVIEW: In a retry loop so we'll use the non exit() version of hooks
                #shellcheck disable=SC2034
                JQTESTFAILFN=jqretry

                DESIRED_CONFIG=$(jq -r '.desiredConfig' "${tmpfile}") && break
                let COUNT+=1
                if [[ ${COUNT} -gt 12 ]]; then
                    echo "ERROR: Even after retries, command pipeline failed querying CFS component '${TARGET_XNAME}'"
                    exit 1
                fi
                echo "WARNING: Command pipeline failed querying CFS component '${TARGET_XNAME}'. Retrying after 5 seconds."
                sleep 5
            done
            if [[ -z ${DESIRED_CONFIG} ]]; then
              exit 0
            fi
            echo "Desired configuration for CFS component '${TARGET_XNAME}' is '${DESIRED_CONFIG}'"

            while true; do
              # REVIEW: In a retry loop so we'll use the non exit() version of hooks
              #shellcheck disable=SC2034
              CURLFN=curlretry
              curl --output "${tmpfile}" --header "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=pending")

              # REVIEW: In a retry loop so we'll use the non exit() version of hooks
              #shellcheck disable=SC2034
              JQTESTFAILFN=jqretry

              RESULT=$(jq length "${tmpfile}")
              if [[ "$RESULT" -eq 0 ]]; then
                break
              fi
              echo "Waiting for configuration to complete.  ${RESULT} components remaining."
              sleep 30
            done

            # Set hooks back to the exit versions.
            CURLFN=curlfatal
            JQTESTFAILFN=jqfatal

            # REVIEW: Default fatal
            curl --output "${tmpfile}" --header "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=configured"

            # REVIEW: Default fatal
            CONFIGURED=$(jq length "${tmpfile}")

            # REVIEW: Default fatal
            curl --output "${tmpfile}" --header  "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=failed"

            # REVIEW: Default fatal
            FAILED=$(jq length "${tmpfile}")
            echo "Configuration complete. $CONFIGURED component(s) completed successfully.  $FAILED component(s) failed."
            if [ "$FAILED" -ne "0" ]; then
              # REVIEW: This should just reuse the tmpfile I think, we can save
              # a call here, but if so even if jq fails it looks like we fail
              # that before the implicit exit
              echo "The following components failed: $(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=failed"  | jq -r '. | map(.id) | join(",")')"
              exit 1
            fi
  - name: ensure-csm-rpms-installed
    templateRef:
      name: ssh-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ `{{inputs.parameters.targetNcn}}` }} \
              'source /srv/cray/scripts/metal/metal-lib.sh;install_csm_rpms'
  - name: goss
    dependencies:
      - wait-for-cfs-after-rebuild
      - update-bss-no-wipe
      - ensure-csm-rpms-installed
    templateRef:
      name: ssh-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ `{{inputs.parameters.targetNcn}}` }} \
              -t "SW_ADMIN_PASSWORD='{{.SwitchPassword}}' \
                  GOSS_BASE=/opt/cray/tests/install/ncn \
                  goss -g /opt/cray/tests/install/ncn/suites/ncn-upgrade-tests-worker.yaml \
                    --vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate \
                    --retry-timeout 1h"

{{end}}
