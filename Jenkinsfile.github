/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle'
def major
def minor
def patch
def isStable = env.TAG_NAME != null ? true : false
if ( isStable ) {
    (major, minor, patch) = env.TAG_NAME.tokenize('.')
    major = major.replaceAll("^v","")
}
pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = getRepoName()
        VERSION = sh(returnStdout: true, script: "git describe --tags | tr -s '-' '~' | tr -d '^v'").trim()
        TAG_POINTS_AT_HEAD = sh(returnStdout: true, script: "git tag --points-at HEAD | tr -d '^v'").trim()
        ADDITIONAL_VERSIONS = "${env.VERSION == env.TAG_POINTS_AT_HEAD ? 'latest' : ''}"
        SLACK_CHANNEL_ALERTS = "csm-release-alerts"
    }

    stages {

        stage('Build & Publish') {

            matrix {

                agent {
                    node {
                        label "metal-gcp-builder"
                        customWorkspace "${env.WORKSPACE}/${sleVersion}"
                    }
                }

                axes {
                    axis {
                        name 'sleVersion'
                        values 15.3, 15.4
                    }
                }

                stages {

                    stage('Prepare: RPMs') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            withCredentials([gitUsernamePassword(credentialsId: 'jenkins-algol60-cray-hpe-github-integration')]) {
                                runLibraryScript("addRpmMetaData.sh", "${env.NAME}.spec")
                                sh "git update-index --assume-unchanged ${env.NAME}.spec"
                                sh "echo ${env.BRANCH_NAME}"
                                sh "env"
                                sh "make prepare"
                            }
                        }
                    }

                    stage('Build: RPMs') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            withCredentials([gitUsernamePassword(credentialsId: 'jenkins-algol60-cray-hpe-github-integration')]) {
                                sh "make rpm"
                            }
                        }
                    }

                    stage('Publish: RPMs') {
                        steps {
                            script {
                                if( isStable ){
                                    RELEASE_FOLDER = "/${major}.${minor}"
                                } else {
                                    RELEASE_FOLDER = ""
                                }
                                ADDITIONAL_VERSIONS = ("${env.ADDITIONAL_VERSIONS}" == "null") ? [] : ["${env.ADDITIONAL_VERSIONS}"]
                                sles_version_parts = "${sleVersion}".tokenize('.')
                                sles_major = "${sles_version_parts[0]}"
                                sles_minor = "${sles_version_parts[1]}"
                                publishCsmRpms(
                                        additionalVersions: ADDITIONAL_VERSIONS,
                                        arch: "noarch",
                                        component: env.NAME + RELEASE_FOLDER,
                                        isStable: isStable,
                                        os: "sle-${sles_major}sp${sles_minor}",
                                        pattern: "dist/rpmbuild/RPMS/noarch/*.rpm",
                                )
                                publishCsmRpms(
                                        additionalVersions: ADDITIONAL_VERSIONS,
                                        arch: "src",
                                        component: env.NAME + RELEASE_FOLDER,
                                        isStable: isStable,
                                        os: "sle-${sles_major}sp${sles_minor}",
                                        pattern: "dist/rpmbuild/SRPMS/*.rpm",
                                )
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "danger", message: "<${env.BUILD_URL}|DOCS-CSM ${env.VERSION}> - :x: Build did not complete successfully")
            }
        }
        aborted {
            script {
                slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "warning", message: "<${env.BUILD_URL}|DOCS-CSM ${env.VERSION}> - :warning: Job was aborted")
            }
        }
    }
  }
