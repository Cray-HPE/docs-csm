#!/usr/bin/bash
#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

################################################################################
# This script imports BOS session templates from a JSON list file and
# recreates them.
#
# It can also accept a TGZ file. This TGZ file can be of two possible formats:
# 1) An archive generated by the export_bos_data.sh script. In this case, the
#    session templates will be in a file in the archive: v2/sessiontemplates.json
# 2) An archive generated by an old version of the export_bos_sessiontemplates.sh
#    script. In this case, the archive will contain individual JSON files for each
#    session template.
#
# Most of the work is done by a Python script. This shell script mostly just
# handles the TGZ case, if needed.
################################################################################

err_exit()
{
    echo "ERROR: $*" >&2
    exit 1
}

usage()
{
    echo "Usage: $0 [--ims-id-map-file <IMS ID JSON map file>] <JSON or TGZ file containing BOS session templates>"
    exit 1
}

IMS_ID_MAP_FILE=""
if [[ $# -eq 1 ]]; then
    ARCHIVE=$1
elif [[ $# -eq 3 && $1 == --ims-id-map-file ]]; then
    IMS_ID_MAP_FILE=$2
    ARCHIVE=$3
else
    usage
fi

basedir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
import_python_script="${basedir}/import_bos_sessiontemplates.py"
[[ -e ${import_python_script} ]] ||
    err_exit "File does not exist: '${import_python_script}'"
[[ -f ${import_python_script} ]] ||
    err_exit "Not a regular file: '${import_python_script}'"
[[ -x ${import_python_script} ]] ||
    err_exit "File is not executable: '${import_python_script}'"

if [[ ${ARCHIVE} =~ .*\.tgz$ ]]; then
    # Archive files generated by earlier versions of the BOS export script created
    # tgz archives with one JSON file for each BOS session template.
    # In this case, expand the archive, and then create a single JSON file containing
    # the contents of the others, as a list.

    # Unpack the archive in temporary directory
    TMPDIR=`mktemp -d` || err_exit "Command failed: mktemp -d"
    echo "Unpacking '${ARCHIVE}' to temporary directory '${TMPDIR}'"
    tar xvfz "${ARCHIVE}" --directory "${TMPDIR}" || err_exit "Command failed: tar xvfz ${ARCHIVE} --directory ${TMPDIR}"

    # If this archive was generated from the export_bos_data script, then find the v2/sessiontemplates.json file
    TEMPLATES_JSON=$(find "${TMPDIR}" -type f -name sessiontemplates.json -path \*/v2/sessiontemplates.json -print -quit)

    if [[ -n ${TEMPLATES_JSON} ]]; then
        echo "Found sessiontemplates list in archive: '${TEMPLATES_JSON}'"
    elif [[ -z ${TEMPLATES_JSON} ]]; then
        # In this case, there should be a directory in the archive containing JSON files of the session templates
        TEMPLATES_JSON=$(find "${TMPDIR}" -type f -name \*.json -printf "%h" -quit)
        [[ -n ${TEMPLATES_JSON} ]] || err_exit "No JSON files found in archive"
        echo "Found sessiontemplates directory in archive: '${TEMPLATES_JSON}'"
    fi

    if [[ -z ${IMS_ID_MAP_FILE} ]]; then
        echo "Running: ${import_python_script} '${TEMPLATES_JSON}'"
        "${import_python_script}" "${TEMPLATES_JSON}" || err_exit "Command failed: ${import_python_script} '${TEMPLATES_JSON}'"
    else
        echo "Running: ${import_python_script} --ims-id-map-file '${IMS_ID_MAP_FILE}' '${TEMPLATES_JSON}'"
        "${import_python_script}" --ims-id-map-file "${IMS_ID_MAP_FILE}" "${TEMPLATES_JSON}" ||
            err_exit "Command failed: ${import_python_script} --ims-id-map-file '${IMS_ID_MAP_FILE}' '${TEMPLATES_JSON}'"
    fi

    # Clean up
    rm -rf "${TMPDIR}"
    exit 0
elif [[ ${ARCHIVE} =~ .*\.json$ ]]; then
    if [[ -z ${IMS_ID_MAP_FILE} ]]; then
        echo "Running: ${import_python_script} '${ARCHIVE}'"
        "${import_python_script}" "${ARCHIVE}" || err_exit "Command failed: ${import_python_script} '${ARCHIVE}'"
    else
        echo "Running: ${import_python_script} --ims-id-map-file '${IMS_ID_MAP_FILE}' '${ARCHIVE}'"
        "${import_python_script}" --ims-id-map-file "${IMS_ID_MAP_FILE}" "${ARCHIVE}" ||
            err_exit "Command failed: ${import_python_script} --ims-id-map-file '${IMS_ID_MAP_FILE}' '${ARCHIVE}'"
    fi
    exit 0
fi

err_exit "Final argument must be a .tgz or .json file. Invalid argument: '${ARCHIVE}'"
