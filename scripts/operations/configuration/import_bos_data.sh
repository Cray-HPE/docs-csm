#!/usr/bin/bash
#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

##################################################################################
#
# This script imports BOS data from a provided archive. The archive can either
# be a JSON file containing a list of session templates, or it can be a TGZ file.
# This TGZ file can be of two possible formats:
#
# 1) An archive generated by the export_bos_data.sh script. In this case, the
#    session templates will be in a file in the archive: v2/sessiontemplates.json
# 2) An archive generated by an old version of the export_bos_sessiontemplates.sh
#    script. In this case, the archive will contain individual JSON files for each
#    session template.
#
# For TGZ option #1, both session templates and options will be restored.
# Otherwise (TGZ option #2 or a JSON file), just session templates will be
# restored.
#
# If the --clear-bos parameter is specified, then all BOS sessions and session
# templates will be deleted before the import is performed.
#
# Most of the work is done by a Python script. This shell script mostly just
# handles the TGZ case, if needed.
#
##################################################################################

CLEAR_BOS=""

err_exit() {
  echo "ERROR: $*" >&2
  exit 1
}

basedir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
import_python_script="${basedir}/import_bos_data.py"
[[ -e ${import_python_script} ]] \
  || err_exit "File does not exist: '${import_python_script}'"
[[ -f ${import_python_script} ]] \
  || err_exit "Not a regular file: '${import_python_script}'"
[[ -x ${import_python_script} ]] \
  || err_exit "File is not executable: '${import_python_script}'"

usage() {
  echo "Usage: $0 [--clear-bos] <JSON or TGZ file containing BOS data>"
  exit 1
}

run_import() {
  echo "Running: ${import_python_script} $*"
  "${import_python_script}" "$@" || err_exit "Command failed: ${import_python_script} $*"
  return
}

if [[ $# -eq 1 ]]; then
  ARCHIVE=$1
elif [[ $# -eq 2 && $1 == --clear-bos ]]; then
  CLEAR_BOS="--clear-bos"
  ARCHIVE=$2
else
  usage
fi

if [[ ${ARCHIVE} =~ .*\.tgz$ ]]; then
  # Archive files generated by earlier versions of the BOS export script created
  # tgz archives with one JSON file for each BOS session template.
  # In this case, expand the archive, and then create a single JSON file containing
  # the contents of the others, as a list.

  # Unpack the archive in temporary directory
  TMPDIR=$(mktemp -d) || err_exit "Command failed: mktemp -d"
  echo "Unpacking '${ARCHIVE}' to temporary directory '${TMPDIR}'"
  tar xvfz "${ARCHIVE}" --directory "${TMPDIR}" || err_exit "Command failed: tar xvfz ${ARCHIVE} --directory ${TMPDIR}"

  # If this archive was generated from the export_bos_data script, then find the v2/sessiontemplates.json file
  TEMPLATES_JSON=$(find "${TMPDIR}" -type f -name sessiontemplates.json -path \*/v2/sessiontemplates.json -print -quit)
  OPTIONS_JSON=""

  if [[ -n ${TEMPLATES_JSON} ]]; then
    echo "Found sessiontemplates list in archive: '${TEMPLATES_JSON}'"
    # This should also mean that there is an options.json in the same directory
    OPTIONS_JSON=$(echo "${TEMPLATES_JSON}" | sed 's#/v2/sessiontemplates.json$#/v2/options.json#')
    [[ -e ${OPTIONS_JSON} ]] || err_exit "${OPTIONS_JSON} not found"
    echo "Found options file in archive: '${OPTIONS_JSON}'"
    run_import ${CLEAR_BOS} --options-file "${OPTIONS_JSON}" "${TEMPLATES_JSON}"
  elif [[ -z ${TEMPLATES_JSON} ]]; then
    # In this case, there should be a directory in the archive containing JSON files of the session templates
    TEMPLATES_JSON=$(find "${TMPDIR}" -type f -name \*.json -printf "%h" -quit)
    [[ -n ${TEMPLATES_JSON} ]] || err_exit "No JSON files found in archive"
    echo "Found sessiontemplates directory in archive: '${TEMPLATES_JSON}'"
    run_import ${CLEAR_BOS} "${TEMPLATES_JSON}"
  fi

  # Clean up
  rm -rf "${TMPDIR}"
  exit 0
elif [[ ${ARCHIVE} =~ .*\.json$ ]]; then
  run_import ${CLEAR_BOS} "${ARCHIVE}"
  exit 0
fi

err_exit "Final argument must be a .tgz or .json file. Invalid argument: '${ARCHIVE}'"
